
ADXL362_346.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003954  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba8  08003ba8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bb0  08003bb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb4  08003bb4  00013bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000070  08003c28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003c28  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2b7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d0  00000000  00000000  0002a357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002bb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214f4  00000000  00000000  0002cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad57  00000000  00000000  0004e0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca186  00000000  00000000  00058e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122f91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026ac  00000000  00000000  00122fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003b0c 	.word	0x08003b0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003b0c 	.word	0x08003b0c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <send_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_uart(char *string)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff fe1f 	bl	8000210 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, 2000);
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	b29a      	uxth	r2, r3
 80005da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <send_uart+0x2c>)
 80005e2:	f002 fa7e 	bl	8002ae2 <HAL_UART_Transmit>
}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000e4 	.word	0x200000e4

080005f4 <ADXL362_ReadReg>:

uint8_t ADXL362_ReadReg(uint8_t reg)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
    tx_data[0] = 0x0B;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <ADXL362_ReadReg+0x48>)
 8000600:	220b      	movs	r2, #11
 8000602:	701a      	strb	r2, [r3, #0]
    tx_data[1] = reg;
 8000604:	4a0d      	ldr	r2, [pc, #52]	; (800063c <ADXL362_ReadReg+0x48>)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	7053      	strb	r3, [r2, #1]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	480c      	ldr	r0, [pc, #48]	; (8000640 <ADXL362_ReadReg+0x4c>)
 8000610:	f000 fe70 	bl	80012f4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, tx_data, rx_data, 2, 1000);
 8000614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2302      	movs	r3, #2
 800061c:	4a09      	ldr	r2, [pc, #36]	; (8000644 <ADXL362_ReadReg+0x50>)
 800061e:	4907      	ldr	r1, [pc, #28]	; (800063c <ADXL362_ReadReg+0x48>)
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <ADXL362_ReadReg+0x54>)
 8000622:	f001 ff3f 	bl	80024a4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2140      	movs	r1, #64	; 0x40
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <ADXL362_ReadReg+0x4c>)
 800062c:	f000 fe62 	bl	80012f4 <HAL_GPIO_WritePin>
    return rx_data[1];
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <ADXL362_ReadReg+0x50>)
 8000632:	785b      	ldrb	r3, [r3, #1]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000130 	.word	0x20000130
 8000640:	40020400 	.word	0x40020400
 8000644:	20000134 	.word	0x20000134
 8000648:	2000008c 	.word	0x2000008c

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b09d      	sub	sp, #116	; 0x74
 8000650:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fb3f 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f861 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 f92d 	bl	80008b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065e:	f000 f901 	bl	8000864 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000662:	f000 f8c9 	bl	80007f8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2140      	movs	r1, #64	; 0x40
 800066a:	4825      	ldr	r0, [pc, #148]	; (8000700 <main+0xb4>)
 800066c:	f000 fe42 	bl	80012f4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000670:	200a      	movs	r0, #10
 8000672:	f000 fba1 	bl	8000db8 <HAL_Delay>
  {
    /* USER CODE END WHILE */

	//Read Data :
	//1- Set cs LOW - Activate
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2140      	movs	r1, #64	; 0x40
 800067a:	4821      	ldr	r0, [pc, #132]	; (8000700 <main+0xb4>)
 800067c:	f000 fe3a 	bl	80012f4 <HAL_GPIO_WritePin>
	//2- Transmite the command read
	spiData[0] = CDM_READ;
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <main+0xb8>)
 8000682:	220b      	movs	r2, #11
 8000684:	701a      	strb	r2, [r3, #0]
	spiData[1] = REGISTER_X;
 8000686:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <main+0xb8>)
 8000688:	2208      	movs	r2, #8
 800068a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi2, spiData, 2, 500);
 800068c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000690:	2202      	movs	r2, #2
 8000692:	491c      	ldr	r1, [pc, #112]	; (8000704 <main+0xb8>)
 8000694:	481c      	ldr	r0, [pc, #112]	; (8000708 <main+0xbc>)
 8000696:	f001 fcb8 	bl	800200a <HAL_SPI_Transmit>
	//3- Transmite register adress
	//HAL_SPI_Transmit(&hspi2, REGISTER_X, 1, 500);
	//4- Read
	HAL_SPI_Receive(&hspi2, spiDataRecive[0], 1, 500);
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <main+0xc0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4619      	mov	r1, r3
 80006a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006a4:	2201      	movs	r2, #1
 80006a6:	4818      	ldr	r0, [pc, #96]	; (8000708 <main+0xbc>)
 80006a8:	f001 fdeb 	bl	8002282 <HAL_SPI_Receive>
	//5- Set cs HIGH - Desactivate
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2140      	movs	r1, #64	; 0x40
 80006b0:	4813      	ldr	r0, [pc, #76]	; (8000700 <main+0xb4>)
 80006b2:	f000 fe1f 	bl	80012f4 <HAL_GPIO_WritePin>


	//Chat GPT
	count++;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <main+0xc4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <main+0xc4>)
 80006be:	6013      	str	r3, [r2, #0]
	val = ADXL362_ReadReg(REGISTER_X);
 80006c0:	2008      	movs	r0, #8
 80006c2:	f7ff ff97 	bl	80005f4 <ADXL362_ReadReg>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <main+0xc8>)
 80006cc:	701a      	strb	r2, [r3, #0]
	sprintf(msg, "%d. Chat GPT    -> X : %d\r\n%d. 2 fonctions -> X : %d\r\n",(int)count, (int)val, (int)count, (int)spiDataRecive[0]);
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <main+0xc4>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <main+0xc8>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	461c      	mov	r4, r3
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <main+0xc4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	490b      	ldr	r1, [pc, #44]	; (800070c <main+0xc0>)
 80006de:	7809      	ldrb	r1, [r1, #0]
 80006e0:	1d38      	adds	r0, r7, #4
 80006e2:	9101      	str	r1, [sp, #4]
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	4623      	mov	r3, r4
 80006e8:	490b      	ldr	r1, [pc, #44]	; (8000718 <main+0xcc>)
 80006ea:	f002 fda1 	bl	8003230 <siprintf>
	send_uart(msg);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff67 	bl	80005c4 <send_uart>

	HAL_Delay(100);
 80006f6:	2064      	movs	r0, #100	; 0x64
 80006f8:	f000 fb5e 	bl	8000db8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006fc:	e7bb      	b.n	8000676 <main+0x2a>
 80006fe:	bf00      	nop
 8000700:	40020400 	.word	0x40020400
 8000704:	20000128 	.word	0x20000128
 8000708:	2000008c 	.word	0x2000008c
 800070c:	2000012c 	.word	0x2000012c
 8000710:	20000138 	.word	0x20000138
 8000714:	20000136 	.word	0x20000136
 8000718:	08003b24 	.word	0x08003b24

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2234      	movs	r2, #52	; 0x34
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fd78 	bl	8003220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <SystemClock_Config+0xd4>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a29      	ldr	r2, [pc, #164]	; (80007f0 <SystemClock_Config+0xd4>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <SystemClock_Config+0xd4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800075c:	2300      	movs	r3, #0
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <SystemClock_Config+0xd8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000768:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <SystemClock_Config+0xd8>)
 800076a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <SystemClock_Config+0xd8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000790:	2310      	movs	r3, #16
 8000792:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000794:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000798:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800079a:	2304      	movs	r3, #4
 800079c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 f906 	bl	80019bc <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007b6:	f000 f903 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2302      	movs	r3, #2
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	2102      	movs	r1, #2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 fda6 	bl	8001328 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007e2:	f000 f8ed 	bl	80009c0 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3750      	adds	r7, #80	; 0x50
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_SPI2_Init+0x64>)
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <MX_SPI2_Init+0x68>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_SPI2_Init+0x64>)
 8000804:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000808:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_SPI2_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_SPI2_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_SPI2_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_SPI2_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_SPI2_Init+0x64>)
 8000824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000828:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_SPI2_Init+0x64>)
 800082c:	2228      	movs	r2, #40	; 0x28
 800082e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_SPI2_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_SPI2_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_SPI2_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_SPI2_Init+0x64>)
 8000844:	220a      	movs	r2, #10
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_SPI2_Init+0x64>)
 800084a:	f001 fb55 	bl	8001ef8 <HAL_SPI_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000854:	f000 f8b4 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000008c 	.word	0x2000008c
 8000860:	40003800 	.word	0x40003800

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MX_USART2_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800089c:	f002 f8d4 	bl	8002a48 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 f88b 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000e4 	.word	0x200000e4
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b37      	ldr	r3, [pc, #220]	; (80009b0 <MX_GPIO_Init+0xf8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a36      	ldr	r2, [pc, #216]	; (80009b0 <MX_GPIO_Init+0xf8>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <MX_GPIO_Init+0xf8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <MX_GPIO_Init+0xf8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a2f      	ldr	r2, [pc, #188]	; (80009b0 <MX_GPIO_Init+0xf8>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <MX_GPIO_Init+0xf8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <MX_GPIO_Init+0xf8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a28      	ldr	r2, [pc, #160]	; (80009b0 <MX_GPIO_Init+0xf8>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <MX_GPIO_Init+0xf8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_GPIO_Init+0xf8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <MX_GPIO_Init+0xf8>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_GPIO_Init+0xf8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2120      	movs	r1, #32
 8000942:	481c      	ldr	r0, [pc, #112]	; (80009b4 <MX_GPIO_Init+0xfc>)
 8000944:	f000 fcd6 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2140      	movs	r1, #64	; 0x40
 800094c:	481a      	ldr	r0, [pc, #104]	; (80009b8 <MX_GPIO_Init+0x100>)
 800094e:	f000 fcd1 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000958:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	4814      	ldr	r0, [pc, #80]	; (80009bc <MX_GPIO_Init+0x104>)
 800096a:	f000 fb2f 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800096e:	2320      	movs	r3, #32
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <MX_GPIO_Init+0xfc>)
 8000986:	f000 fb21 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800098a:	2340      	movs	r3, #64	; 0x40
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_GPIO_Init+0x100>)
 80009a2:	f000 fb13 	bl	8000fcc <HAL_GPIO_Init>

}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400
 80009bc:	40020800 	.word	0x40020800

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <Error_Handler+0x8>
	...

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <HAL_MspInit+0x4c>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <HAL_MspInit+0x4c>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a0a:	2007      	movs	r0, #7
 8000a0c:	f000 faaa 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800

08000a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a30      	ldr	r2, [pc, #192]	; (8000afc <HAL_SPI_MspInit+0xe0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d15a      	bne.n	8000af4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <HAL_SPI_MspInit+0xe4>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a2e      	ldr	r2, [pc, #184]	; (8000b00 <HAL_SPI_MspInit+0xe4>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <HAL_SPI_MspInit+0xe4>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <HAL_SPI_MspInit+0xe4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a27      	ldr	r2, [pc, #156]	; (8000b00 <HAL_SPI_MspInit+0xe4>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <HAL_SPI_MspInit+0xe4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <HAL_SPI_MspInit+0xe4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a20      	ldr	r2, [pc, #128]	; (8000b00 <HAL_SPI_MspInit+0xe4>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <HAL_SPI_MspInit+0xe4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a92:	2302      	movs	r3, #2
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4815      	ldr	r0, [pc, #84]	; (8000b04 <HAL_SPI_MspInit+0xe8>)
 8000aae:	f000 fa8d 	bl	8000fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac2:	2305      	movs	r3, #5
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <HAL_SPI_MspInit+0xe8>)
 8000ace:	f000 fa7d 	bl	8000fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ae4:	2305      	movs	r3, #5
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <HAL_SPI_MspInit+0xec>)
 8000af0:	f000 fa6c 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40003800 	.word	0x40003800
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020800 	.word	0x40020800
 8000b08:	40020400 	.word	0x40020400

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <HAL_UART_MspInit+0x84>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12b      	bne.n	8000b86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b66:	230c      	movs	r3, #12
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b76:	2307      	movs	r3, #7
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_UART_MspInit+0x8c>)
 8000b82:	f000 fa23 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be8:	f000 f8c6 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f002 fad4 	bl	80031cc <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20020000 	.word	0x20020000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	2000013c 	.word	0x2000013c
 8000c58:	20000158 	.word	0x20000158

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c86:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ffd7 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f002 fa93 	bl	80031d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fccb 	bl	800064c <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cc4:	08003bb8 	.word	0x08003bb8
  ldr r2, =_sbss
 8000cc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ccc:	20000154 	.word	0x20000154

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f931 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe60 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f93b 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f911 	bl	8000f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000140 	.word	0x20000140

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000140 	.word	0x20000140

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff47 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5c 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff8e 	bl	8000eb8 <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb0 	bl	8000f20 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e165      	b.n	80012b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 8154 	bne.w	80012ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d005      	beq.n	800101e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	2b02      	cmp	r3, #2
 800101c:	d130      	bne.n	8001080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d017      	beq.n	80010bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80ae 	beq.w	80012ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b5d      	ldr	r3, [pc, #372]	; (80012cc <HAL_GPIO_Init+0x300>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a5c      	ldr	r2, [pc, #368]	; (80012cc <HAL_GPIO_Init+0x300>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b5a      	ldr	r3, [pc, #360]	; (80012cc <HAL_GPIO_Init+0x300>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116e:	4a58      	ldr	r2, [pc, #352]	; (80012d0 <HAL_GPIO_Init+0x304>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4f      	ldr	r2, [pc, #316]	; (80012d4 <HAL_GPIO_Init+0x308>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d025      	beq.n	80011e6 <HAL_GPIO_Init+0x21a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4e      	ldr	r2, [pc, #312]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d01f      	beq.n	80011e2 <HAL_GPIO_Init+0x216>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4d      	ldr	r2, [pc, #308]	; (80012dc <HAL_GPIO_Init+0x310>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d019      	beq.n	80011de <HAL_GPIO_Init+0x212>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4c      	ldr	r2, [pc, #304]	; (80012e0 <HAL_GPIO_Init+0x314>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0x20e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <HAL_GPIO_Init+0x318>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00d      	beq.n	80011d6 <HAL_GPIO_Init+0x20a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4a      	ldr	r2, [pc, #296]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d007      	beq.n	80011d2 <HAL_GPIO_Init+0x206>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a49      	ldr	r2, [pc, #292]	; (80012ec <HAL_GPIO_Init+0x320>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_GPIO_Init+0x202>
 80011ca:	2306      	movs	r3, #6
 80011cc:	e00c      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011ce:	2307      	movs	r3, #7
 80011d0:	e00a      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011d2:	2305      	movs	r3, #5
 80011d4:	e008      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011d6:	2304      	movs	r3, #4
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011da:	2303      	movs	r3, #3
 80011dc:	e004      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011de:	2302      	movs	r3, #2
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011e6:	2300      	movs	r3, #0
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	f002 0203 	and.w	r2, r2, #3
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	4093      	lsls	r3, r2
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f8:	4935      	ldr	r1, [pc, #212]	; (80012d0 <HAL_GPIO_Init+0x304>)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <HAL_GPIO_Init+0x324>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122a:	4a31      	ldr	r2, [pc, #196]	; (80012f0 <HAL_GPIO_Init+0x324>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001230:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_GPIO_Init+0x324>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001254:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <HAL_GPIO_Init+0x324>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <HAL_GPIO_Init+0x324>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <HAL_GPIO_Init+0x324>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_GPIO_Init+0x324>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a8:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_GPIO_Init+0x324>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3301      	adds	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2b0f      	cmp	r3, #15
 80012b8:	f67f ae96 	bls.w	8000fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40021400 	.word	0x40021400
 80012ec:	40021800 	.word	0x40021800
 80012f0:	40013c00 	.word	0x40013c00

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001310:	e003      	b.n	800131a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	041a      	lsls	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	619a      	str	r2, [r3, #24]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e0cc      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800133c:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <HAL_RCC_ClockConfig+0x1b8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 030f 	and.w	r3, r3, #15
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d90c      	bls.n	8001364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b65      	ldr	r3, [pc, #404]	; (80014e0 <HAL_RCC_ClockConfig+0x1b8>)
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001352:	4b63      	ldr	r3, [pc, #396]	; (80014e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d001      	beq.n	8001364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e0b8      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800137c:	4b59      	ldr	r3, [pc, #356]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001386:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001394:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4a52      	ldr	r2, [pc, #328]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800139e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a0:	4b50      	ldr	r3, [pc, #320]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	494d      	ldr	r1, [pc, #308]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d044      	beq.n	8001448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d107      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d119      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e07f      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d003      	beq.n	80013e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e6:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e06f      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f6:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e067      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001406:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f023 0203 	bic.w	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4934      	ldr	r1, [pc, #208]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001414:	4313      	orrs	r3, r2
 8001416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001418:	f7ff fcc2 	bl	8000da0 <HAL_GetTick>
 800141c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141e:	e00a      	b.n	8001436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001420:	f7ff fcbe 	bl	8000da0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	; 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e04f      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 020c 	and.w	r2, r3, #12
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	429a      	cmp	r2, r3
 8001446:	d1eb      	bne.n	8001420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <HAL_RCC_ClockConfig+0x1b8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d20c      	bcs.n	8001470 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e032      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d008      	beq.n	800148e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	4916      	ldr	r1, [pc, #88]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	4313      	orrs	r3, r2
 800148c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d009      	beq.n	80014ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	490e      	ldr	r1, [pc, #56]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ae:	f000 f855 	bl	800155c <HAL_RCC_GetSysClockFreq>
 80014b2:	4602      	mov	r2, r0
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	490a      	ldr	r1, [pc, #40]	; (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	5ccb      	ldrb	r3, [r1, r3]
 80014c2:	fa22 f303 	lsr.w	r3, r2, r3
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_RCC_ClockConfig+0x1c8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fc22 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023c00 	.word	0x40023c00
 80014e4:	40023800 	.word	0x40023800
 80014e8:	08003b5c 	.word	0x08003b5c
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_RCC_GetHCLKFreq+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000000 	.word	0x20000000

0800150c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001510:	f7ff fff0 	bl	80014f4 <HAL_RCC_GetHCLKFreq>
 8001514:	4602      	mov	r2, r0
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	0a9b      	lsrs	r3, r3, #10
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	4903      	ldr	r1, [pc, #12]	; (8001530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001522:	5ccb      	ldrb	r3, [r1, r3]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001528:	4618      	mov	r0, r3
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	08003b6c 	.word	0x08003b6c

08001534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001538:	f7ff ffdc 	bl	80014f4 <HAL_RCC_GetHCLKFreq>
 800153c:	4602      	mov	r2, r0
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	0b5b      	lsrs	r3, r3, #13
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	4903      	ldr	r1, [pc, #12]	; (8001558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800154a:	5ccb      	ldrb	r3, [r1, r3]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	08003b6c 	.word	0x08003b6c

0800155c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800155c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001560:	b0ae      	sub	sp, #184	; 0xb8
 8001562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001582:	4bcb      	ldr	r3, [pc, #812]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b0c      	cmp	r3, #12
 800158c:	f200 8206 	bhi.w	800199c <HAL_RCC_GetSysClockFreq+0x440>
 8001590:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001596:	bf00      	nop
 8001598:	080015cd 	.word	0x080015cd
 800159c:	0800199d 	.word	0x0800199d
 80015a0:	0800199d 	.word	0x0800199d
 80015a4:	0800199d 	.word	0x0800199d
 80015a8:	080015d5 	.word	0x080015d5
 80015ac:	0800199d 	.word	0x0800199d
 80015b0:	0800199d 	.word	0x0800199d
 80015b4:	0800199d 	.word	0x0800199d
 80015b8:	080015dd 	.word	0x080015dd
 80015bc:	0800199d 	.word	0x0800199d
 80015c0:	0800199d 	.word	0x0800199d
 80015c4:	0800199d 	.word	0x0800199d
 80015c8:	080017cd 	.word	0x080017cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015cc:	4bb9      	ldr	r3, [pc, #740]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80015ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80015d2:	e1e7      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015d4:	4bb8      	ldr	r3, [pc, #736]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80015d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015da:	e1e3      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015dc:	4bb4      	ldr	r3, [pc, #720]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015e8:	4bb1      	ldr	r3, [pc, #708]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d071      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f4:	4bae      	ldr	r3, [pc, #696]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	2200      	movs	r2, #0
 80015fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001600:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800160c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001616:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800161a:	4622      	mov	r2, r4
 800161c:	462b      	mov	r3, r5
 800161e:	f04f 0000 	mov.w	r0, #0
 8001622:	f04f 0100 	mov.w	r1, #0
 8001626:	0159      	lsls	r1, r3, #5
 8001628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800162c:	0150      	lsls	r0, r2, #5
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4621      	mov	r1, r4
 8001634:	1a51      	subs	r1, r2, r1
 8001636:	6439      	str	r1, [r7, #64]	; 0x40
 8001638:	4629      	mov	r1, r5
 800163a:	eb63 0301 	sbc.w	r3, r3, r1
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800164c:	4649      	mov	r1, r9
 800164e:	018b      	lsls	r3, r1, #6
 8001650:	4641      	mov	r1, r8
 8001652:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001656:	4641      	mov	r1, r8
 8001658:	018a      	lsls	r2, r1, #6
 800165a:	4641      	mov	r1, r8
 800165c:	1a51      	subs	r1, r2, r1
 800165e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001660:	4649      	mov	r1, r9
 8001662:	eb63 0301 	sbc.w	r3, r3, r1
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001674:	4649      	mov	r1, r9
 8001676:	00cb      	lsls	r3, r1, #3
 8001678:	4641      	mov	r1, r8
 800167a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800167e:	4641      	mov	r1, r8
 8001680:	00ca      	lsls	r2, r1, #3
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	4603      	mov	r3, r0
 8001688:	4622      	mov	r2, r4
 800168a:	189b      	adds	r3, r3, r2
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
 800168e:	462b      	mov	r3, r5
 8001690:	460a      	mov	r2, r1
 8001692:	eb42 0303 	adc.w	r3, r2, r3
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016a4:	4629      	mov	r1, r5
 80016a6:	024b      	lsls	r3, r1, #9
 80016a8:	4621      	mov	r1, r4
 80016aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016ae:	4621      	mov	r1, r4
 80016b0:	024a      	lsls	r2, r1, #9
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016ba:	2200      	movs	r2, #0
 80016bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80016c8:	f7fe fdfa 	bl	80002c0 <__aeabi_uldivmod>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4613      	mov	r3, r2
 80016d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016d6:	e067      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d8:	4b75      	ldr	r3, [pc, #468]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	099b      	lsrs	r3, r3, #6
 80016de:	2200      	movs	r2, #0
 80016e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016e4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80016e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80016f2:	2300      	movs	r3, #0
 80016f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80016fa:	4622      	mov	r2, r4
 80016fc:	462b      	mov	r3, r5
 80016fe:	f04f 0000 	mov.w	r0, #0
 8001702:	f04f 0100 	mov.w	r1, #0
 8001706:	0159      	lsls	r1, r3, #5
 8001708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800170c:	0150      	lsls	r0, r2, #5
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4621      	mov	r1, r4
 8001714:	1a51      	subs	r1, r2, r1
 8001716:	62b9      	str	r1, [r7, #40]	; 0x28
 8001718:	4629      	mov	r1, r5
 800171a:	eb63 0301 	sbc.w	r3, r3, r1
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800172c:	4649      	mov	r1, r9
 800172e:	018b      	lsls	r3, r1, #6
 8001730:	4641      	mov	r1, r8
 8001732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001736:	4641      	mov	r1, r8
 8001738:	018a      	lsls	r2, r1, #6
 800173a:	4641      	mov	r1, r8
 800173c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001740:	4649      	mov	r1, r9
 8001742:	eb63 0b01 	sbc.w	fp, r3, r1
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001752:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001756:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800175a:	4692      	mov	sl, r2
 800175c:	469b      	mov	fp, r3
 800175e:	4623      	mov	r3, r4
 8001760:	eb1a 0303 	adds.w	r3, sl, r3
 8001764:	623b      	str	r3, [r7, #32]
 8001766:	462b      	mov	r3, r5
 8001768:	eb4b 0303 	adc.w	r3, fp, r3
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800177a:	4629      	mov	r1, r5
 800177c:	028b      	lsls	r3, r1, #10
 800177e:	4621      	mov	r1, r4
 8001780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001784:	4621      	mov	r1, r4
 8001786:	028a      	lsls	r2, r1, #10
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001790:	2200      	movs	r2, #0
 8001792:	673b      	str	r3, [r7, #112]	; 0x70
 8001794:	677a      	str	r2, [r7, #116]	; 0x74
 8001796:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800179a:	f7fe fd91 	bl	80002c0 <__aeabi_uldivmod>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4613      	mov	r3, r2
 80017a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017a8:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	0c1b      	lsrs	r3, r3, #16
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	3301      	adds	r3, #1
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80017ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017ca:	e0eb      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017cc:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d8:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d06b      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e4:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	099b      	lsrs	r3, r3, #6
 80017ea:	2200      	movs	r2, #0
 80017ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80017ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80017f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017f6:	663b      	str	r3, [r7, #96]	; 0x60
 80017f8:	2300      	movs	r3, #0
 80017fa:	667b      	str	r3, [r7, #100]	; 0x64
 80017fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001800:	4622      	mov	r2, r4
 8001802:	462b      	mov	r3, r5
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	0159      	lsls	r1, r3, #5
 800180e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001812:	0150      	lsls	r0, r2, #5
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4621      	mov	r1, r4
 800181a:	1a51      	subs	r1, r2, r1
 800181c:	61b9      	str	r1, [r7, #24]
 800181e:	4629      	mov	r1, r5
 8001820:	eb63 0301 	sbc.w	r3, r3, r1
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001832:	4659      	mov	r1, fp
 8001834:	018b      	lsls	r3, r1, #6
 8001836:	4651      	mov	r1, sl
 8001838:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800183c:	4651      	mov	r1, sl
 800183e:	018a      	lsls	r2, r1, #6
 8001840:	4651      	mov	r1, sl
 8001842:	ebb2 0801 	subs.w	r8, r2, r1
 8001846:	4659      	mov	r1, fp
 8001848:	eb63 0901 	sbc.w	r9, r3, r1
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001858:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800185c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001860:	4690      	mov	r8, r2
 8001862:	4699      	mov	r9, r3
 8001864:	4623      	mov	r3, r4
 8001866:	eb18 0303 	adds.w	r3, r8, r3
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	462b      	mov	r3, r5
 800186e:	eb49 0303 	adc.w	r3, r9, r3
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001880:	4629      	mov	r1, r5
 8001882:	024b      	lsls	r3, r1, #9
 8001884:	4621      	mov	r1, r4
 8001886:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800188a:	4621      	mov	r1, r4
 800188c:	024a      	lsls	r2, r1, #9
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001896:	2200      	movs	r2, #0
 8001898:	65bb      	str	r3, [r7, #88]	; 0x58
 800189a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800189c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018a0:	f7fe fd0e 	bl	80002c0 <__aeabi_uldivmod>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4613      	mov	r3, r2
 80018aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018ae:	e065      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x420>
 80018b0:	40023800 	.word	0x40023800
 80018b4:	00f42400 	.word	0x00f42400
 80018b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018bc:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	2200      	movs	r2, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	4611      	mov	r1, r2
 80018c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018cc:	653b      	str	r3, [r7, #80]	; 0x50
 80018ce:	2300      	movs	r3, #0
 80018d0:	657b      	str	r3, [r7, #84]	; 0x54
 80018d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80018d6:	4642      	mov	r2, r8
 80018d8:	464b      	mov	r3, r9
 80018da:	f04f 0000 	mov.w	r0, #0
 80018de:	f04f 0100 	mov.w	r1, #0
 80018e2:	0159      	lsls	r1, r3, #5
 80018e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e8:	0150      	lsls	r0, r2, #5
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4641      	mov	r1, r8
 80018f0:	1a51      	subs	r1, r2, r1
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	4649      	mov	r1, r9
 80018f6:	eb63 0301 	sbc.w	r3, r3, r1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001908:	4659      	mov	r1, fp
 800190a:	018b      	lsls	r3, r1, #6
 800190c:	4651      	mov	r1, sl
 800190e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001912:	4651      	mov	r1, sl
 8001914:	018a      	lsls	r2, r1, #6
 8001916:	4651      	mov	r1, sl
 8001918:	1a54      	subs	r4, r2, r1
 800191a:	4659      	mov	r1, fp
 800191c:	eb63 0501 	sbc.w	r5, r3, r1
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	00eb      	lsls	r3, r5, #3
 800192a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800192e:	00e2      	lsls	r2, r4, #3
 8001930:	4614      	mov	r4, r2
 8001932:	461d      	mov	r5, r3
 8001934:	4643      	mov	r3, r8
 8001936:	18e3      	adds	r3, r4, r3
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	464b      	mov	r3, r9
 800193c:	eb45 0303 	adc.w	r3, r5, r3
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800194e:	4629      	mov	r1, r5
 8001950:	028b      	lsls	r3, r1, #10
 8001952:	4621      	mov	r1, r4
 8001954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001958:	4621      	mov	r1, r4
 800195a:	028a      	lsls	r2, r1, #10
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001964:	2200      	movs	r2, #0
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
 8001968:	64fa      	str	r2, [r7, #76]	; 0x4c
 800196a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800196e:	f7fe fca7 	bl	80002c0 <__aeabi_uldivmod>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4613      	mov	r3, r2
 8001978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	0f1b      	lsrs	r3, r3, #28
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800198a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800198e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800199a:	e003      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800199e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	37b8      	adds	r7, #184	; 0xb8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	00f42400 	.word	0x00f42400

080019bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e28d      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8083 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019dc:	4b94      	ldr	r3, [pc, #592]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d019      	beq.n	8001a1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019e8:	4b91      	ldr	r3, [pc, #580]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d106      	bne.n	8001a02 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019f4:	4b8e      	ldr	r3, [pc, #568]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a00:	d00c      	beq.n	8001a1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a02:	4b8b      	ldr	r3, [pc, #556]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d112      	bne.n	8001a34 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a0e:	4b88      	ldr	r3, [pc, #544]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a1a:	d10b      	bne.n	8001a34 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	4b84      	ldr	r3, [pc, #528]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d05b      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x124>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d157      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e25a      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3c:	d106      	bne.n	8001a4c <HAL_RCC_OscConfig+0x90>
 8001a3e:	4b7c      	ldr	r3, [pc, #496]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a7b      	ldr	r2, [pc, #492]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e01d      	b.n	8001a88 <HAL_RCC_OscConfig+0xcc>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0xb4>
 8001a56:	4b76      	ldr	r3, [pc, #472]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a75      	ldr	r2, [pc, #468]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b73      	ldr	r3, [pc, #460]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a72      	ldr	r2, [pc, #456]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e00b      	b.n	8001a88 <HAL_RCC_OscConfig+0xcc>
 8001a70:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a6e      	ldr	r2, [pc, #440]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b6c      	ldr	r3, [pc, #432]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a6b      	ldr	r2, [pc, #428]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d013      	beq.n	8001ab8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f986 	bl	8000da0 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a98:	f7ff f982 	bl	8000da0 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	; 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e21f      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	4b61      	ldr	r3, [pc, #388]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0xdc>
 8001ab6:	e014      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f972 	bl	8000da0 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7ff f96e 	bl	8000da0 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e20b      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	4b57      	ldr	r3, [pc, #348]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x104>
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d06f      	beq.n	8001bce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001aee:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d017      	beq.n	8001b2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001afa:	4b4d      	ldr	r3, [pc, #308]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d105      	bne.n	8001b12 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b06:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00b      	beq.n	8001b2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b12:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d11c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1e:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d116      	bne.n	8001b58 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d005      	beq.n	8001b42 <HAL_RCC_OscConfig+0x186>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e1d3      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b42:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4937      	ldr	r1, [pc, #220]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b56:	e03a      	b.n	8001bce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d020      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_RCC_OscConfig+0x278>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7ff f91b 	bl	8000da0 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7ff f917 	bl	8000da0 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e1b4      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4925      	ldr	r1, [pc, #148]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]
 8001ba0:	e015      	b.n	8001bce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <HAL_RCC_OscConfig+0x278>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f8fa 	bl	8000da0 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb0:	f7ff f8f6 	bl	8000da0 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e193      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d036      	beq.n	8001c48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d016      	beq.n	8001c10 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_RCC_OscConfig+0x27c>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be8:	f7ff f8da 	bl	8000da0 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf0:	f7ff f8d6 	bl	8000da0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e173      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x234>
 8001c0e:	e01b      	b.n	8001c48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_OscConfig+0x27c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c16:	f7ff f8c3 	bl	8000da0 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	e00e      	b.n	8001c3c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1e:	f7ff f8bf 	bl	8000da0 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d907      	bls.n	8001c3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e15c      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
 8001c30:	40023800 	.word	0x40023800
 8001c34:	42470000 	.word	0x42470000
 8001c38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3c:	4b8a      	ldr	r3, [pc, #552]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ea      	bne.n	8001c1e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8097 	beq.w	8001d84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5a:	4b83      	ldr	r3, [pc, #524]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10f      	bne.n	8001c86 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	4b7f      	ldr	r3, [pc, #508]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a7e      	ldr	r2, [pc, #504]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b7c      	ldr	r3, [pc, #496]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c82:	2301      	movs	r3, #1
 8001c84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c86:	4b79      	ldr	r3, [pc, #484]	; (8001e6c <HAL_RCC_OscConfig+0x4b0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d118      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c92:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <HAL_RCC_OscConfig+0x4b0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a75      	ldr	r2, [pc, #468]	; (8001e6c <HAL_RCC_OscConfig+0x4b0>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f87f 	bl	8000da0 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca6:	f7ff f87b 	bl	8000da0 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e118      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb8:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <HAL_RCC_OscConfig+0x4b0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x31e>
 8001ccc:	4b66      	ldr	r3, [pc, #408]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	4a65      	ldr	r2, [pc, #404]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd8:	e01c      	b.n	8001d14 <HAL_RCC_OscConfig+0x358>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x340>
 8001ce2:	4b61      	ldr	r3, [pc, #388]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce6:	4a60      	ldr	r2, [pc, #384]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	6713      	str	r3, [r2, #112]	; 0x70
 8001cee:	4b5e      	ldr	r3, [pc, #376]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	4a5d      	ldr	r2, [pc, #372]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0x358>
 8001cfc:	4b5a      	ldr	r3, [pc, #360]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	4a59      	ldr	r2, [pc, #356]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	6713      	str	r3, [r2, #112]	; 0x70
 8001d08:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	4a56      	ldr	r2, [pc, #344]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001d0e:	f023 0304 	bic.w	r3, r3, #4
 8001d12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d015      	beq.n	8001d48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f840 	bl	8000da0 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7ff f83c 	bl	8000da0 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0d7      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0ee      	beq.n	8001d24 <HAL_RCC_OscConfig+0x368>
 8001d46:	e014      	b.n	8001d72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff f82a 	bl	8000da0 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d50:	f7ff f826 	bl	8000da0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e0c1      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d66:	4b40      	ldr	r3, [pc, #256]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1ee      	bne.n	8001d50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d78:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a3a      	ldr	r2, [pc, #232]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80ad 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d8e:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d060      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d145      	bne.n	8001e2e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <HAL_RCC_OscConfig+0x4b4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7fe fffa 	bl	8000da0 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db0:	f7fe fff6 	bl	8000da0 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e093      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69da      	ldr	r2, [r3, #28]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	019b      	lsls	r3, r3, #6
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	085b      	lsrs	r3, r3, #1
 8001de6:	3b01      	subs	r3, #1
 8001de8:	041b      	lsls	r3, r3, #16
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	061b      	lsls	r3, r3, #24
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	071b      	lsls	r3, r3, #28
 8001dfa:	491b      	ldr	r1, [pc, #108]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_RCC_OscConfig+0x4b4>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7fe ffcb 	bl	8000da0 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7fe ffc7 	bl	8000da0 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e064      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x452>
 8001e2c:	e05c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_RCC_OscConfig+0x4b4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7fe ffb4 	bl	8000da0 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7fe ffb0 	bl	8000da0 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e04d      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_RCC_OscConfig+0x4ac>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x480>
 8001e5a:	e045      	b.n	8001ee8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e040      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <HAL_RCC_OscConfig+0x538>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d030      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d129      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d122      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d119      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	085b      	lsrs	r3, r3, #1
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d10f      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e07b      	b.n	8002002 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d108      	bne.n	8001f24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f1a:	d009      	beq.n	8001f30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
 8001f22:	e005      	b.n	8001f30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fd66 	bl	8000a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb4:	ea42 0103 	orr.w	r1, r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	0c1b      	lsrs	r3, r3, #16
 8001fce:	f003 0104 	and.w	r1, r3, #4
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	f003 0210 	and.w	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	69da      	ldr	r2, [r3, #28]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b088      	sub	sp, #32
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_SPI_Transmit+0x22>
 8002028:	2302      	movs	r3, #2
 800202a:	e126      	b.n	800227a <HAL_SPI_Transmit+0x270>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002034:	f7fe feb4 	bl	8000da0 <HAL_GetTick>
 8002038:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d002      	beq.n	8002050 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800204a:	2302      	movs	r3, #2
 800204c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800204e:	e10b      	b.n	8002268 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_SPI_Transmit+0x52>
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d102      	bne.n	8002062 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002060:	e102      	b.n	8002268 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2203      	movs	r2, #3
 8002066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	88fa      	ldrh	r2, [r7, #6]
 800207a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	88fa      	ldrh	r2, [r7, #6]
 8002080:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020a8:	d10f      	bne.n	80020ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d4:	2b40      	cmp	r3, #64	; 0x40
 80020d6:	d007      	beq.n	80020e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020f0:	d14b      	bne.n	800218a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_SPI_Transmit+0xf6>
 80020fa:	8afb      	ldrh	r3, [r7, #22]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d13e      	bne.n	800217e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	881a      	ldrh	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	1c9a      	adds	r2, r3, #2
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002124:	e02b      	b.n	800217e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b02      	cmp	r3, #2
 8002132:	d112      	bne.n	800215a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	881a      	ldrh	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	1c9a      	adds	r2, r3, #2
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800214e:	b29b      	uxth	r3, r3
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	86da      	strh	r2, [r3, #54]	; 0x36
 8002158:	e011      	b.n	800217e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800215a:	f7fe fe21 	bl	8000da0 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d803      	bhi.n	8002172 <HAL_SPI_Transmit+0x168>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d102      	bne.n	8002178 <HAL_SPI_Transmit+0x16e>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800217c:	e074      	b.n	8002268 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002182:	b29b      	uxth	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1ce      	bne.n	8002126 <HAL_SPI_Transmit+0x11c>
 8002188:	e04c      	b.n	8002224 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_SPI_Transmit+0x18e>
 8002192:	8afb      	ldrh	r3, [r7, #22]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d140      	bne.n	800221a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	330c      	adds	r3, #12
 80021a2:	7812      	ldrb	r2, [r2, #0]
 80021a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021be:	e02c      	b.n	800221a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d113      	bne.n	80021f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	330c      	adds	r3, #12
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80021f4:	e011      	b.n	800221a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021f6:	f7fe fdd3 	bl	8000da0 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d803      	bhi.n	800220e <HAL_SPI_Transmit+0x204>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d102      	bne.n	8002214 <HAL_SPI_Transmit+0x20a>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002218:	e026      	b.n	8002268 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1cd      	bne.n	80021c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	6839      	ldr	r1, [r7, #0]
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fbcb 	bl	80029c4 <SPI_EndRxTxTransaction>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2220      	movs	r2, #32
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10a      	bne.n	8002258 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	77fb      	strb	r3, [r7, #31]
 8002264:	e000      	b.n	8002268 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002266:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002278:	7ffb      	ldrb	r3, [r7, #31]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b088      	sub	sp, #32
 8002286:	af02      	add	r7, sp, #8
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	4613      	mov	r3, r2
 8002290:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800229e:	d112      	bne.n	80022c6 <HAL_SPI_Receive+0x44>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10e      	bne.n	80022c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2204      	movs	r2, #4
 80022ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022b0:	88fa      	ldrh	r2, [r7, #6]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	4613      	mov	r3, r2
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f8f1 	bl	80024a4 <HAL_SPI_TransmitReceive>
 80022c2:	4603      	mov	r3, r0
 80022c4:	e0ea      	b.n	800249c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_SPI_Receive+0x52>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e0e3      	b.n	800249c <HAL_SPI_Receive+0x21a>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022dc:	f7fe fd60 	bl	8000da0 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d002      	beq.n	80022f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80022ee:	2302      	movs	r3, #2
 80022f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022f2:	e0ca      	b.n	800248a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <HAL_SPI_Receive+0x7e>
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002304:	e0c1      	b.n	800248a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2204      	movs	r2, #4
 800230a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	88fa      	ldrh	r2, [r7, #6]
 800231e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800234c:	d10f      	bne.n	800236e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800235c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800236c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002378:	2b40      	cmp	r3, #64	; 0x40
 800237a:	d007      	beq.n	800238c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800238a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d162      	bne.n	800245a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002394:	e02e      	b.n	80023f4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d115      	bne.n	80023d0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f103 020c 	add.w	r2, r3, #12
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	7812      	ldrb	r2, [r2, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023ce:	e011      	b.n	80023f4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023d0:	f7fe fce6 	bl	8000da0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d803      	bhi.n	80023e8 <HAL_SPI_Receive+0x166>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e6:	d102      	bne.n	80023ee <HAL_SPI_Receive+0x16c>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d102      	bne.n	80023f4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023f2:	e04a      	b.n	800248a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1cb      	bne.n	8002396 <HAL_SPI_Receive+0x114>
 80023fe:	e031      	b.n	8002464 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d113      	bne.n	8002436 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	b292      	uxth	r2, r2
 800241a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	1c9a      	adds	r2, r3, #2
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002434:	e011      	b.n	800245a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002436:	f7fe fcb3 	bl	8000da0 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d803      	bhi.n	800244e <HAL_SPI_Receive+0x1cc>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d102      	bne.n	8002454 <HAL_SPI_Receive+0x1d2>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002458:	e017      	b.n	800248a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1cd      	bne.n	8002400 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	6839      	ldr	r1, [r7, #0]
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fa45 	bl	80028f8 <SPI_EndRxTransaction>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	75fb      	strb	r3, [r7, #23]
 8002486:	e000      	b.n	800248a <HAL_SPI_Receive+0x208>
  }

error :
 8002488:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800249a:	7dfb      	ldrb	r3, [r7, #23]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	; 0x30
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024b2:	2301      	movs	r3, #1
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_SPI_TransmitReceive+0x26>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e18a      	b.n	80027e0 <HAL_SPI_TransmitReceive+0x33c>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024d2:	f7fe fc65 	bl	8000da0 <HAL_GetTick>
 80024d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024e8:	887b      	ldrh	r3, [r7, #2]
 80024ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d00f      	beq.n	8002514 <HAL_SPI_TransmitReceive+0x70>
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024fa:	d107      	bne.n	800250c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d103      	bne.n	800250c <HAL_SPI_TransmitReceive+0x68>
 8002504:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002508:	2b04      	cmp	r3, #4
 800250a:	d003      	beq.n	8002514 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800250c:	2302      	movs	r3, #2
 800250e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002512:	e15b      	b.n	80027cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_SPI_TransmitReceive+0x82>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_SPI_TransmitReceive+0x82>
 8002520:	887b      	ldrh	r3, [r7, #2]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800252c:	e14e      	b.n	80027cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b04      	cmp	r3, #4
 8002538:	d003      	beq.n	8002542 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2205      	movs	r2, #5
 800253e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	887a      	ldrh	r2, [r7, #2]
 8002552:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	887a      	ldrh	r2, [r7, #2]
 8002564:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	887a      	ldrh	r2, [r7, #2]
 800256a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b40      	cmp	r3, #64	; 0x40
 8002584:	d007      	beq.n	8002596 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002594:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800259e:	d178      	bne.n	8002692 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_SPI_TransmitReceive+0x10a>
 80025a8:	8b7b      	ldrh	r3, [r7, #26]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d166      	bne.n	800267c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	881a      	ldrh	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	1c9a      	adds	r2, r3, #2
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025d2:	e053      	b.n	800267c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d11b      	bne.n	800261a <HAL_SPI_TransmitReceive+0x176>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d016      	beq.n	800261a <HAL_SPI_TransmitReceive+0x176>
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d113      	bne.n	800261a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	881a      	ldrh	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	1c9a      	adds	r2, r3, #2
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b01      	cmp	r3, #1
 8002626:	d119      	bne.n	800265c <HAL_SPI_TransmitReceive+0x1b8>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d014      	beq.n	800265c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	b292      	uxth	r2, r2
 800263e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	1c9a      	adds	r2, r3, #2
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002658:	2301      	movs	r3, #1
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800265c:	f7fe fba0 	bl	8000da0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002668:	429a      	cmp	r2, r3
 800266a:	d807      	bhi.n	800267c <HAL_SPI_TransmitReceive+0x1d8>
 800266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d003      	beq.n	800267c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800267a:	e0a7      	b.n	80027cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1a6      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x130>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1a1      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x130>
 8002690:	e07c      	b.n	800278c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <HAL_SPI_TransmitReceive+0x1fc>
 800269a:	8b7b      	ldrh	r3, [r7, #26]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d16b      	bne.n	8002778 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	330c      	adds	r3, #12
 80026aa:	7812      	ldrb	r2, [r2, #0]
 80026ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026c6:	e057      	b.n	8002778 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d11c      	bne.n	8002710 <HAL_SPI_TransmitReceive+0x26c>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d017      	beq.n	8002710 <HAL_SPI_TransmitReceive+0x26c>
 80026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d114      	bne.n	8002710 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	7812      	ldrb	r2, [r2, #0]
 80026f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d119      	bne.n	8002752 <HAL_SPI_TransmitReceive+0x2ae>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d014      	beq.n	8002752 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800274e:	2301      	movs	r3, #1
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002752:	f7fe fb25 	bl	8000da0 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800275e:	429a      	cmp	r2, r3
 8002760:	d803      	bhi.n	800276a <HAL_SPI_TransmitReceive+0x2c6>
 8002762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d102      	bne.n	8002770 <HAL_SPI_TransmitReceive+0x2cc>
 800276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276c:	2b00      	cmp	r3, #0
 800276e:	d103      	bne.n	8002778 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002776:	e029      	b.n	80027cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1a2      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x224>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d19d      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800278c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f917 	bl	80029c4 <SPI_EndRxTxTransaction>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027a8:	e010      	b.n	80027cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10b      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	e000      	b.n	80027cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3730      	adds	r7, #48	; 0x30
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027f8:	f7fe fad2 	bl	8000da0 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	4413      	add	r3, r2
 8002806:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002808:	f7fe faca 	bl	8000da0 <HAL_GetTick>
 800280c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800280e:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	015b      	lsls	r3, r3, #5
 8002814:	0d1b      	lsrs	r3, r3, #20
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800281e:	e054      	b.n	80028ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002826:	d050      	beq.n	80028ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002828:	f7fe faba 	bl	8000da0 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	429a      	cmp	r2, r3
 8002836:	d902      	bls.n	800283e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d13d      	bne.n	80028ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800284c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002856:	d111      	bne.n	800287c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002860:	d004      	beq.n	800286c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286a:	d107      	bne.n	800287c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800287a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002884:	d10f      	bne.n	80028a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e017      	b.n	80028ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4013      	ands	r3, r2
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	bf0c      	ite	eq
 80028da:	2301      	moveq	r3, #1
 80028dc:	2300      	movne	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d19b      	bne.n	8002820 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000000 	.word	0x20000000

080028f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290c:	d111      	bne.n	8002932 <SPI_EndRxTransaction+0x3a>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002916:	d004      	beq.n	8002922 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002920:	d107      	bne.n	8002932 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002930:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800293a:	d12a      	bne.n	8002992 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002944:	d012      	beq.n	800296c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2200      	movs	r2, #0
 800294e:	2180      	movs	r1, #128	; 0x80
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff ff49 	bl	80027e8 <SPI_WaitFlagStateUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d02d      	beq.n	80029b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	f043 0220 	orr.w	r2, r3, #32
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e026      	b.n	80029ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2200      	movs	r2, #0
 8002974:	2101      	movs	r1, #1
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff ff36 	bl	80027e8 <SPI_WaitFlagStateUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01a      	beq.n	80029b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	f043 0220 	orr.w	r2, r3, #32
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e013      	b.n	80029ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2200      	movs	r2, #0
 800299a:	2101      	movs	r1, #1
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff ff23 	bl	80027e8 <SPI_WaitFlagStateUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e000      	b.n	80029ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <SPI_EndRxTxTransaction+0x7c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <SPI_EndRxTxTransaction+0x80>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0d5b      	lsrs	r3, r3, #21
 80029dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ee:	d112      	bne.n	8002a16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2200      	movs	r2, #0
 80029f8:	2180      	movs	r1, #128	; 0x80
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f7ff fef4 	bl	80027e8 <SPI_WaitFlagStateUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	f043 0220 	orr.w	r2, r3, #32
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e00f      	b.n	8002a36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2c:	2b80      	cmp	r3, #128	; 0x80
 8002a2e:	d0f2      	beq.n	8002a16 <SPI_EndRxTxTransaction+0x52>
 8002a30:	e000      	b.n	8002a34 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a32:	bf00      	nop
  }

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000000 	.word	0x20000000
 8002a44:	165e9f81 	.word	0x165e9f81

08002a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e03f      	b.n	8002ada <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe f84c 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2224      	movs	r2, #36	; 0x24
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f929 	bl	8002ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b08a      	sub	sp, #40	; 0x28
 8002ae6:	af02      	add	r7, sp, #8
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d17c      	bne.n	8002bfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_UART_Transmit+0x2c>
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e075      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_UART_Transmit+0x3e>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e06e      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b36:	f7fe f933 	bl	8000da0 <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	88fa      	ldrh	r2, [r7, #6]
 8002b40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b50:	d108      	bne.n	8002b64 <HAL_UART_Transmit+0x82>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	e003      	b.n	8002b6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b74:	e02a      	b.n	8002bcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f840 	bl	8002c06 <UART_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e036      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	3302      	adds	r3, #2
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	e007      	b.n	8002bbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	781a      	ldrb	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1cf      	bne.n	8002b76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2140      	movs	r1, #64	; 0x40
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f810 	bl	8002c06 <UART_WaitOnFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e006      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b090      	sub	sp, #64	; 0x40
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c16:	e050      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d04c      	beq.n	8002cba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c26:	f7fe f8bb 	bl	8000da0 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d241      	bcs.n	8002cba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	e853 3f00 	ldrex	r3, [r3]
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	330c      	adds	r3, #12
 8002c54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c56:	637a      	str	r2, [r7, #52]	; 0x34
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c5e:	e841 2300 	strex	r3, r2, [r1]
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1e5      	bne.n	8002c36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3314      	adds	r3, #20
 8002c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	613b      	str	r3, [r7, #16]
   return(result);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3314      	adds	r3, #20
 8002c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c8a:	623a      	str	r2, [r7, #32]
 8002c8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	69f9      	ldr	r1, [r7, #28]
 8002c90:	6a3a      	ldr	r2, [r7, #32]
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e5      	bne.n	8002c6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e00f      	b.n	8002cda <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	bf0c      	ite	eq
 8002cca:	2301      	moveq	r3, #1
 8002ccc:	2300      	movne	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d09f      	beq.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3740      	adds	r7, #64	; 0x40
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce8:	b0c0      	sub	sp, #256	; 0x100
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d00:	68d9      	ldr	r1, [r3, #12]
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	ea40 0301 	orr.w	r3, r0, r1
 8002d0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d3c:	f021 010c 	bic.w	r1, r1, #12
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	6999      	ldr	r1, [r3, #24]
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	ea40 0301 	orr.w	r3, r0, r1
 8002d6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <UART_SetConfig+0x2cc>)
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d005      	beq.n	8002d84 <UART_SetConfig+0xa0>
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4b8d      	ldr	r3, [pc, #564]	; (8002fb4 <UART_SetConfig+0x2d0>)
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d104      	bne.n	8002d8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d84:	f7fe fbd6 	bl	8001534 <HAL_RCC_GetPCLK2Freq>
 8002d88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d8c:	e003      	b.n	8002d96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d8e:	f7fe fbbd 	bl	800150c <HAL_RCC_GetPCLK1Freq>
 8002d92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da0:	f040 810c 	bne.w	8002fbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da8:	2200      	movs	r2, #0
 8002daa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002db2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002db6:	4622      	mov	r2, r4
 8002db8:	462b      	mov	r3, r5
 8002dba:	1891      	adds	r1, r2, r2
 8002dbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dbe:	415b      	adcs	r3, r3
 8002dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	eb12 0801 	adds.w	r8, r2, r1
 8002dcc:	4629      	mov	r1, r5
 8002dce:	eb43 0901 	adc.w	r9, r3, r1
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002de6:	4690      	mov	r8, r2
 8002de8:	4699      	mov	r9, r3
 8002dea:	4623      	mov	r3, r4
 8002dec:	eb18 0303 	adds.w	r3, r8, r3
 8002df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002df4:	462b      	mov	r3, r5
 8002df6:	eb49 0303 	adc.w	r3, r9, r3
 8002dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e12:	460b      	mov	r3, r1
 8002e14:	18db      	adds	r3, r3, r3
 8002e16:	653b      	str	r3, [r7, #80]	; 0x50
 8002e18:	4613      	mov	r3, r2
 8002e1a:	eb42 0303 	adc.w	r3, r2, r3
 8002e1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e28:	f7fd fa4a 	bl	80002c0 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002e32:	fba3 2302 	umull	r2, r3, r3, r2
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	011c      	lsls	r4, r3, #4
 8002e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	1891      	adds	r1, r2, r2
 8002e52:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e54:	415b      	adcs	r3, r3
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	eb12 0a01 	adds.w	sl, r2, r1
 8002e62:	4649      	mov	r1, r9
 8002e64:	eb43 0b01 	adc.w	fp, r3, r1
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e7c:	4692      	mov	sl, r2
 8002e7e:	469b      	mov	fp, r3
 8002e80:	4643      	mov	r3, r8
 8002e82:	eb1a 0303 	adds.w	r3, sl, r3
 8002e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ea0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ea4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	18db      	adds	r3, r3, r3
 8002eac:	643b      	str	r3, [r7, #64]	; 0x40
 8002eae:	4613      	mov	r3, r2
 8002eb0:	eb42 0303 	adc.w	r3, r2, r3
 8002eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002eba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ebe:	f7fd f9ff 	bl	80002c0 <__aeabi_uldivmod>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002eca:	fba3 2301 	umull	r2, r3, r3, r1
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	2264      	movs	r2, #100	; 0x64
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	1acb      	subs	r3, r1, r3
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ede:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002ee0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eec:	441c      	add	r4, r3
 8002eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ef8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002efc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f00:	4642      	mov	r2, r8
 8002f02:	464b      	mov	r3, r9
 8002f04:	1891      	adds	r1, r2, r2
 8002f06:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f08:	415b      	adcs	r3, r3
 8002f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f10:	4641      	mov	r1, r8
 8002f12:	1851      	adds	r1, r2, r1
 8002f14:	6339      	str	r1, [r7, #48]	; 0x30
 8002f16:	4649      	mov	r1, r9
 8002f18:	414b      	adcs	r3, r1
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f28:	4659      	mov	r1, fp
 8002f2a:	00cb      	lsls	r3, r1, #3
 8002f2c:	4651      	mov	r1, sl
 8002f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f32:	4651      	mov	r1, sl
 8002f34:	00ca      	lsls	r2, r1, #3
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	189b      	adds	r3, r3, r2
 8002f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f44:	464b      	mov	r3, r9
 8002f46:	460a      	mov	r2, r1
 8002f48:	eb42 0303 	adc.w	r3, r2, r3
 8002f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f64:	460b      	mov	r3, r1
 8002f66:	18db      	adds	r3, r3, r3
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	eb42 0303 	adc.w	r3, r2, r3
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f7a:	f7fd f9a1 	bl	80002c0 <__aeabi_uldivmod>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002f84:	fba3 1302 	umull	r1, r3, r3, r2
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	2164      	movs	r1, #100	; 0x64
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	3332      	adds	r3, #50	; 0x32
 8002f96:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	f003 0207 	and.w	r2, r3, #7
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4422      	add	r2, r4
 8002faa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fac:	e105      	b.n	80031ba <UART_SetConfig+0x4d6>
 8002fae:	bf00      	nop
 8002fb0:	40011000 	.word	0x40011000
 8002fb4:	40011400 	.word	0x40011400
 8002fb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fce:	4642      	mov	r2, r8
 8002fd0:	464b      	mov	r3, r9
 8002fd2:	1891      	adds	r1, r2, r2
 8002fd4:	6239      	str	r1, [r7, #32]
 8002fd6:	415b      	adcs	r3, r3
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fde:	4641      	mov	r1, r8
 8002fe0:	1854      	adds	r4, r2, r1
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	eb43 0501 	adc.w	r5, r3, r1
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	00eb      	lsls	r3, r5, #3
 8002ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ff6:	00e2      	lsls	r2, r4, #3
 8002ff8:	4614      	mov	r4, r2
 8002ffa:	461d      	mov	r5, r3
 8002ffc:	4643      	mov	r3, r8
 8002ffe:	18e3      	adds	r3, r4, r3
 8003000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003004:	464b      	mov	r3, r9
 8003006:	eb45 0303 	adc.w	r3, r5, r3
 800300a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800300e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800301a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800302a:	4629      	mov	r1, r5
 800302c:	008b      	lsls	r3, r1, #2
 800302e:	4621      	mov	r1, r4
 8003030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003034:	4621      	mov	r1, r4
 8003036:	008a      	lsls	r2, r1, #2
 8003038:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800303c:	f7fd f940 	bl	80002c0 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4b60      	ldr	r3, [pc, #384]	; (80031c8 <UART_SetConfig+0x4e4>)
 8003046:	fba3 2302 	umull	r2, r3, r3, r2
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	011c      	lsls	r4, r3, #4
 800304e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003052:	2200      	movs	r2, #0
 8003054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003058:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800305c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003060:	4642      	mov	r2, r8
 8003062:	464b      	mov	r3, r9
 8003064:	1891      	adds	r1, r2, r2
 8003066:	61b9      	str	r1, [r7, #24]
 8003068:	415b      	adcs	r3, r3
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003070:	4641      	mov	r1, r8
 8003072:	1851      	adds	r1, r2, r1
 8003074:	6139      	str	r1, [r7, #16]
 8003076:	4649      	mov	r1, r9
 8003078:	414b      	adcs	r3, r1
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003088:	4659      	mov	r1, fp
 800308a:	00cb      	lsls	r3, r1, #3
 800308c:	4651      	mov	r1, sl
 800308e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003092:	4651      	mov	r1, sl
 8003094:	00ca      	lsls	r2, r1, #3
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	4603      	mov	r3, r0
 800309c:	4642      	mov	r2, r8
 800309e:	189b      	adds	r3, r3, r2
 80030a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030a4:	464b      	mov	r3, r9
 80030a6:	460a      	mov	r2, r1
 80030a8:	eb42 0303 	adc.w	r3, r2, r3
 80030ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80030ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030c8:	4649      	mov	r1, r9
 80030ca:	008b      	lsls	r3, r1, #2
 80030cc:	4641      	mov	r1, r8
 80030ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d2:	4641      	mov	r1, r8
 80030d4:	008a      	lsls	r2, r1, #2
 80030d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030da:	f7fd f8f1 	bl	80002c0 <__aeabi_uldivmod>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <UART_SetConfig+0x4e4>)
 80030e4:	fba3 1302 	umull	r1, r3, r3, r2
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	2164      	movs	r1, #100	; 0x64
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	3332      	adds	r3, #50	; 0x32
 80030f6:	4a34      	ldr	r2, [pc, #208]	; (80031c8 <UART_SetConfig+0x4e4>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003102:	441c      	add	r4, r3
 8003104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003108:	2200      	movs	r2, #0
 800310a:	673b      	str	r3, [r7, #112]	; 0x70
 800310c:	677a      	str	r2, [r7, #116]	; 0x74
 800310e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003112:	4642      	mov	r2, r8
 8003114:	464b      	mov	r3, r9
 8003116:	1891      	adds	r1, r2, r2
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	415b      	adcs	r3, r3
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003122:	4641      	mov	r1, r8
 8003124:	1851      	adds	r1, r2, r1
 8003126:	6039      	str	r1, [r7, #0]
 8003128:	4649      	mov	r1, r9
 800312a:	414b      	adcs	r3, r1
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800313a:	4659      	mov	r1, fp
 800313c:	00cb      	lsls	r3, r1, #3
 800313e:	4651      	mov	r1, sl
 8003140:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003144:	4651      	mov	r1, sl
 8003146:	00ca      	lsls	r2, r1, #3
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	4603      	mov	r3, r0
 800314e:	4642      	mov	r2, r8
 8003150:	189b      	adds	r3, r3, r2
 8003152:	66bb      	str	r3, [r7, #104]	; 0x68
 8003154:	464b      	mov	r3, r9
 8003156:	460a      	mov	r2, r1
 8003158:	eb42 0303 	adc.w	r3, r2, r3
 800315c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	663b      	str	r3, [r7, #96]	; 0x60
 8003168:	667a      	str	r2, [r7, #100]	; 0x64
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003176:	4649      	mov	r1, r9
 8003178:	008b      	lsls	r3, r1, #2
 800317a:	4641      	mov	r1, r8
 800317c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003180:	4641      	mov	r1, r8
 8003182:	008a      	lsls	r2, r1, #2
 8003184:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003188:	f7fd f89a 	bl	80002c0 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <UART_SetConfig+0x4e4>)
 8003192:	fba3 1302 	umull	r1, r3, r3, r2
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2164      	movs	r1, #100	; 0x64
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	3332      	adds	r3, #50	; 0x32
 80031a4:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <UART_SetConfig+0x4e4>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	f003 020f 	and.w	r2, r3, #15
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4422      	add	r2, r4
 80031b8:	609a      	str	r2, [r3, #8]
}
 80031ba:	bf00      	nop
 80031bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031c0:	46bd      	mov	sp, r7
 80031c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c6:	bf00      	nop
 80031c8:	51eb851f 	.word	0x51eb851f

080031cc <__errno>:
 80031cc:	4b01      	ldr	r3, [pc, #4]	; (80031d4 <__errno+0x8>)
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	2000000c 	.word	0x2000000c

080031d8 <__libc_init_array>:
 80031d8:	b570      	push	{r4, r5, r6, lr}
 80031da:	4d0d      	ldr	r5, [pc, #52]	; (8003210 <__libc_init_array+0x38>)
 80031dc:	4c0d      	ldr	r4, [pc, #52]	; (8003214 <__libc_init_array+0x3c>)
 80031de:	1b64      	subs	r4, r4, r5
 80031e0:	10a4      	asrs	r4, r4, #2
 80031e2:	2600      	movs	r6, #0
 80031e4:	42a6      	cmp	r6, r4
 80031e6:	d109      	bne.n	80031fc <__libc_init_array+0x24>
 80031e8:	4d0b      	ldr	r5, [pc, #44]	; (8003218 <__libc_init_array+0x40>)
 80031ea:	4c0c      	ldr	r4, [pc, #48]	; (800321c <__libc_init_array+0x44>)
 80031ec:	f000 fc8e 	bl	8003b0c <_init>
 80031f0:	1b64      	subs	r4, r4, r5
 80031f2:	10a4      	asrs	r4, r4, #2
 80031f4:	2600      	movs	r6, #0
 80031f6:	42a6      	cmp	r6, r4
 80031f8:	d105      	bne.n	8003206 <__libc_init_array+0x2e>
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
 80031fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003200:	4798      	blx	r3
 8003202:	3601      	adds	r6, #1
 8003204:	e7ee      	b.n	80031e4 <__libc_init_array+0xc>
 8003206:	f855 3b04 	ldr.w	r3, [r5], #4
 800320a:	4798      	blx	r3
 800320c:	3601      	adds	r6, #1
 800320e:	e7f2      	b.n	80031f6 <__libc_init_array+0x1e>
 8003210:	08003bb0 	.word	0x08003bb0
 8003214:	08003bb0 	.word	0x08003bb0
 8003218:	08003bb0 	.word	0x08003bb0
 800321c:	08003bb4 	.word	0x08003bb4

08003220 <memset>:
 8003220:	4402      	add	r2, r0
 8003222:	4603      	mov	r3, r0
 8003224:	4293      	cmp	r3, r2
 8003226:	d100      	bne.n	800322a <memset+0xa>
 8003228:	4770      	bx	lr
 800322a:	f803 1b01 	strb.w	r1, [r3], #1
 800322e:	e7f9      	b.n	8003224 <memset+0x4>

08003230 <siprintf>:
 8003230:	b40e      	push	{r1, r2, r3}
 8003232:	b500      	push	{lr}
 8003234:	b09c      	sub	sp, #112	; 0x70
 8003236:	ab1d      	add	r3, sp, #116	; 0x74
 8003238:	9002      	str	r0, [sp, #8]
 800323a:	9006      	str	r0, [sp, #24]
 800323c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003240:	4809      	ldr	r0, [pc, #36]	; (8003268 <siprintf+0x38>)
 8003242:	9107      	str	r1, [sp, #28]
 8003244:	9104      	str	r1, [sp, #16]
 8003246:	4909      	ldr	r1, [pc, #36]	; (800326c <siprintf+0x3c>)
 8003248:	f853 2b04 	ldr.w	r2, [r3], #4
 800324c:	9105      	str	r1, [sp, #20]
 800324e:	6800      	ldr	r0, [r0, #0]
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	a902      	add	r1, sp, #8
 8003254:	f000 f868 	bl	8003328 <_svfiprintf_r>
 8003258:	9b02      	ldr	r3, [sp, #8]
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	b01c      	add	sp, #112	; 0x70
 8003260:	f85d eb04 	ldr.w	lr, [sp], #4
 8003264:	b003      	add	sp, #12
 8003266:	4770      	bx	lr
 8003268:	2000000c 	.word	0x2000000c
 800326c:	ffff0208 	.word	0xffff0208

08003270 <__ssputs_r>:
 8003270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003274:	688e      	ldr	r6, [r1, #8]
 8003276:	429e      	cmp	r6, r3
 8003278:	4682      	mov	sl, r0
 800327a:	460c      	mov	r4, r1
 800327c:	4690      	mov	r8, r2
 800327e:	461f      	mov	r7, r3
 8003280:	d838      	bhi.n	80032f4 <__ssputs_r+0x84>
 8003282:	898a      	ldrh	r2, [r1, #12]
 8003284:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003288:	d032      	beq.n	80032f0 <__ssputs_r+0x80>
 800328a:	6825      	ldr	r5, [r4, #0]
 800328c:	6909      	ldr	r1, [r1, #16]
 800328e:	eba5 0901 	sub.w	r9, r5, r1
 8003292:	6965      	ldr	r5, [r4, #20]
 8003294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003298:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800329c:	3301      	adds	r3, #1
 800329e:	444b      	add	r3, r9
 80032a0:	106d      	asrs	r5, r5, #1
 80032a2:	429d      	cmp	r5, r3
 80032a4:	bf38      	it	cc
 80032a6:	461d      	movcc	r5, r3
 80032a8:	0553      	lsls	r3, r2, #21
 80032aa:	d531      	bpl.n	8003310 <__ssputs_r+0xa0>
 80032ac:	4629      	mov	r1, r5
 80032ae:	f000 fb63 	bl	8003978 <_malloc_r>
 80032b2:	4606      	mov	r6, r0
 80032b4:	b950      	cbnz	r0, 80032cc <__ssputs_r+0x5c>
 80032b6:	230c      	movs	r3, #12
 80032b8:	f8ca 3000 	str.w	r3, [sl]
 80032bc:	89a3      	ldrh	r3, [r4, #12]
 80032be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032c2:	81a3      	strh	r3, [r4, #12]
 80032c4:	f04f 30ff 	mov.w	r0, #4294967295
 80032c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032cc:	6921      	ldr	r1, [r4, #16]
 80032ce:	464a      	mov	r2, r9
 80032d0:	f000 fabe 	bl	8003850 <memcpy>
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032de:	81a3      	strh	r3, [r4, #12]
 80032e0:	6126      	str	r6, [r4, #16]
 80032e2:	6165      	str	r5, [r4, #20]
 80032e4:	444e      	add	r6, r9
 80032e6:	eba5 0509 	sub.w	r5, r5, r9
 80032ea:	6026      	str	r6, [r4, #0]
 80032ec:	60a5      	str	r5, [r4, #8]
 80032ee:	463e      	mov	r6, r7
 80032f0:	42be      	cmp	r6, r7
 80032f2:	d900      	bls.n	80032f6 <__ssputs_r+0x86>
 80032f4:	463e      	mov	r6, r7
 80032f6:	6820      	ldr	r0, [r4, #0]
 80032f8:	4632      	mov	r2, r6
 80032fa:	4641      	mov	r1, r8
 80032fc:	f000 fab6 	bl	800386c <memmove>
 8003300:	68a3      	ldr	r3, [r4, #8]
 8003302:	1b9b      	subs	r3, r3, r6
 8003304:	60a3      	str	r3, [r4, #8]
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	4433      	add	r3, r6
 800330a:	6023      	str	r3, [r4, #0]
 800330c:	2000      	movs	r0, #0
 800330e:	e7db      	b.n	80032c8 <__ssputs_r+0x58>
 8003310:	462a      	mov	r2, r5
 8003312:	f000 fba5 	bl	8003a60 <_realloc_r>
 8003316:	4606      	mov	r6, r0
 8003318:	2800      	cmp	r0, #0
 800331a:	d1e1      	bne.n	80032e0 <__ssputs_r+0x70>
 800331c:	6921      	ldr	r1, [r4, #16]
 800331e:	4650      	mov	r0, sl
 8003320:	f000 fabe 	bl	80038a0 <_free_r>
 8003324:	e7c7      	b.n	80032b6 <__ssputs_r+0x46>
	...

08003328 <_svfiprintf_r>:
 8003328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800332c:	4698      	mov	r8, r3
 800332e:	898b      	ldrh	r3, [r1, #12]
 8003330:	061b      	lsls	r3, r3, #24
 8003332:	b09d      	sub	sp, #116	; 0x74
 8003334:	4607      	mov	r7, r0
 8003336:	460d      	mov	r5, r1
 8003338:	4614      	mov	r4, r2
 800333a:	d50e      	bpl.n	800335a <_svfiprintf_r+0x32>
 800333c:	690b      	ldr	r3, [r1, #16]
 800333e:	b963      	cbnz	r3, 800335a <_svfiprintf_r+0x32>
 8003340:	2140      	movs	r1, #64	; 0x40
 8003342:	f000 fb19 	bl	8003978 <_malloc_r>
 8003346:	6028      	str	r0, [r5, #0]
 8003348:	6128      	str	r0, [r5, #16]
 800334a:	b920      	cbnz	r0, 8003356 <_svfiprintf_r+0x2e>
 800334c:	230c      	movs	r3, #12
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	f04f 30ff 	mov.w	r0, #4294967295
 8003354:	e0d1      	b.n	80034fa <_svfiprintf_r+0x1d2>
 8003356:	2340      	movs	r3, #64	; 0x40
 8003358:	616b      	str	r3, [r5, #20]
 800335a:	2300      	movs	r3, #0
 800335c:	9309      	str	r3, [sp, #36]	; 0x24
 800335e:	2320      	movs	r3, #32
 8003360:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003364:	f8cd 800c 	str.w	r8, [sp, #12]
 8003368:	2330      	movs	r3, #48	; 0x30
 800336a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003514 <_svfiprintf_r+0x1ec>
 800336e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003372:	f04f 0901 	mov.w	r9, #1
 8003376:	4623      	mov	r3, r4
 8003378:	469a      	mov	sl, r3
 800337a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800337e:	b10a      	cbz	r2, 8003384 <_svfiprintf_r+0x5c>
 8003380:	2a25      	cmp	r2, #37	; 0x25
 8003382:	d1f9      	bne.n	8003378 <_svfiprintf_r+0x50>
 8003384:	ebba 0b04 	subs.w	fp, sl, r4
 8003388:	d00b      	beq.n	80033a2 <_svfiprintf_r+0x7a>
 800338a:	465b      	mov	r3, fp
 800338c:	4622      	mov	r2, r4
 800338e:	4629      	mov	r1, r5
 8003390:	4638      	mov	r0, r7
 8003392:	f7ff ff6d 	bl	8003270 <__ssputs_r>
 8003396:	3001      	adds	r0, #1
 8003398:	f000 80aa 	beq.w	80034f0 <_svfiprintf_r+0x1c8>
 800339c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800339e:	445a      	add	r2, fp
 80033a0:	9209      	str	r2, [sp, #36]	; 0x24
 80033a2:	f89a 3000 	ldrb.w	r3, [sl]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80a2 	beq.w	80034f0 <_svfiprintf_r+0x1c8>
 80033ac:	2300      	movs	r3, #0
 80033ae:	f04f 32ff 	mov.w	r2, #4294967295
 80033b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033b6:	f10a 0a01 	add.w	sl, sl, #1
 80033ba:	9304      	str	r3, [sp, #16]
 80033bc:	9307      	str	r3, [sp, #28]
 80033be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033c2:	931a      	str	r3, [sp, #104]	; 0x68
 80033c4:	4654      	mov	r4, sl
 80033c6:	2205      	movs	r2, #5
 80033c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033cc:	4851      	ldr	r0, [pc, #324]	; (8003514 <_svfiprintf_r+0x1ec>)
 80033ce:	f7fc ff27 	bl	8000220 <memchr>
 80033d2:	9a04      	ldr	r2, [sp, #16]
 80033d4:	b9d8      	cbnz	r0, 800340e <_svfiprintf_r+0xe6>
 80033d6:	06d0      	lsls	r0, r2, #27
 80033d8:	bf44      	itt	mi
 80033da:	2320      	movmi	r3, #32
 80033dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033e0:	0711      	lsls	r1, r2, #28
 80033e2:	bf44      	itt	mi
 80033e4:	232b      	movmi	r3, #43	; 0x2b
 80033e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033ea:	f89a 3000 	ldrb.w	r3, [sl]
 80033ee:	2b2a      	cmp	r3, #42	; 0x2a
 80033f0:	d015      	beq.n	800341e <_svfiprintf_r+0xf6>
 80033f2:	9a07      	ldr	r2, [sp, #28]
 80033f4:	4654      	mov	r4, sl
 80033f6:	2000      	movs	r0, #0
 80033f8:	f04f 0c0a 	mov.w	ip, #10
 80033fc:	4621      	mov	r1, r4
 80033fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003402:	3b30      	subs	r3, #48	; 0x30
 8003404:	2b09      	cmp	r3, #9
 8003406:	d94e      	bls.n	80034a6 <_svfiprintf_r+0x17e>
 8003408:	b1b0      	cbz	r0, 8003438 <_svfiprintf_r+0x110>
 800340a:	9207      	str	r2, [sp, #28]
 800340c:	e014      	b.n	8003438 <_svfiprintf_r+0x110>
 800340e:	eba0 0308 	sub.w	r3, r0, r8
 8003412:	fa09 f303 	lsl.w	r3, r9, r3
 8003416:	4313      	orrs	r3, r2
 8003418:	9304      	str	r3, [sp, #16]
 800341a:	46a2      	mov	sl, r4
 800341c:	e7d2      	b.n	80033c4 <_svfiprintf_r+0x9c>
 800341e:	9b03      	ldr	r3, [sp, #12]
 8003420:	1d19      	adds	r1, r3, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	9103      	str	r1, [sp, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	bfbb      	ittet	lt
 800342a:	425b      	neglt	r3, r3
 800342c:	f042 0202 	orrlt.w	r2, r2, #2
 8003430:	9307      	strge	r3, [sp, #28]
 8003432:	9307      	strlt	r3, [sp, #28]
 8003434:	bfb8      	it	lt
 8003436:	9204      	strlt	r2, [sp, #16]
 8003438:	7823      	ldrb	r3, [r4, #0]
 800343a:	2b2e      	cmp	r3, #46	; 0x2e
 800343c:	d10c      	bne.n	8003458 <_svfiprintf_r+0x130>
 800343e:	7863      	ldrb	r3, [r4, #1]
 8003440:	2b2a      	cmp	r3, #42	; 0x2a
 8003442:	d135      	bne.n	80034b0 <_svfiprintf_r+0x188>
 8003444:	9b03      	ldr	r3, [sp, #12]
 8003446:	1d1a      	adds	r2, r3, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	9203      	str	r2, [sp, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	bfb8      	it	lt
 8003450:	f04f 33ff 	movlt.w	r3, #4294967295
 8003454:	3402      	adds	r4, #2
 8003456:	9305      	str	r3, [sp, #20]
 8003458:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003524 <_svfiprintf_r+0x1fc>
 800345c:	7821      	ldrb	r1, [r4, #0]
 800345e:	2203      	movs	r2, #3
 8003460:	4650      	mov	r0, sl
 8003462:	f7fc fedd 	bl	8000220 <memchr>
 8003466:	b140      	cbz	r0, 800347a <_svfiprintf_r+0x152>
 8003468:	2340      	movs	r3, #64	; 0x40
 800346a:	eba0 000a 	sub.w	r0, r0, sl
 800346e:	fa03 f000 	lsl.w	r0, r3, r0
 8003472:	9b04      	ldr	r3, [sp, #16]
 8003474:	4303      	orrs	r3, r0
 8003476:	3401      	adds	r4, #1
 8003478:	9304      	str	r3, [sp, #16]
 800347a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800347e:	4826      	ldr	r0, [pc, #152]	; (8003518 <_svfiprintf_r+0x1f0>)
 8003480:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003484:	2206      	movs	r2, #6
 8003486:	f7fc fecb 	bl	8000220 <memchr>
 800348a:	2800      	cmp	r0, #0
 800348c:	d038      	beq.n	8003500 <_svfiprintf_r+0x1d8>
 800348e:	4b23      	ldr	r3, [pc, #140]	; (800351c <_svfiprintf_r+0x1f4>)
 8003490:	bb1b      	cbnz	r3, 80034da <_svfiprintf_r+0x1b2>
 8003492:	9b03      	ldr	r3, [sp, #12]
 8003494:	3307      	adds	r3, #7
 8003496:	f023 0307 	bic.w	r3, r3, #7
 800349a:	3308      	adds	r3, #8
 800349c:	9303      	str	r3, [sp, #12]
 800349e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034a0:	4433      	add	r3, r6
 80034a2:	9309      	str	r3, [sp, #36]	; 0x24
 80034a4:	e767      	b.n	8003376 <_svfiprintf_r+0x4e>
 80034a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80034aa:	460c      	mov	r4, r1
 80034ac:	2001      	movs	r0, #1
 80034ae:	e7a5      	b.n	80033fc <_svfiprintf_r+0xd4>
 80034b0:	2300      	movs	r3, #0
 80034b2:	3401      	adds	r4, #1
 80034b4:	9305      	str	r3, [sp, #20]
 80034b6:	4619      	mov	r1, r3
 80034b8:	f04f 0c0a 	mov.w	ip, #10
 80034bc:	4620      	mov	r0, r4
 80034be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034c2:	3a30      	subs	r2, #48	; 0x30
 80034c4:	2a09      	cmp	r2, #9
 80034c6:	d903      	bls.n	80034d0 <_svfiprintf_r+0x1a8>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0c5      	beq.n	8003458 <_svfiprintf_r+0x130>
 80034cc:	9105      	str	r1, [sp, #20]
 80034ce:	e7c3      	b.n	8003458 <_svfiprintf_r+0x130>
 80034d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80034d4:	4604      	mov	r4, r0
 80034d6:	2301      	movs	r3, #1
 80034d8:	e7f0      	b.n	80034bc <_svfiprintf_r+0x194>
 80034da:	ab03      	add	r3, sp, #12
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	462a      	mov	r2, r5
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <_svfiprintf_r+0x1f8>)
 80034e2:	a904      	add	r1, sp, #16
 80034e4:	4638      	mov	r0, r7
 80034e6:	f3af 8000 	nop.w
 80034ea:	1c42      	adds	r2, r0, #1
 80034ec:	4606      	mov	r6, r0
 80034ee:	d1d6      	bne.n	800349e <_svfiprintf_r+0x176>
 80034f0:	89ab      	ldrh	r3, [r5, #12]
 80034f2:	065b      	lsls	r3, r3, #25
 80034f4:	f53f af2c 	bmi.w	8003350 <_svfiprintf_r+0x28>
 80034f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034fa:	b01d      	add	sp, #116	; 0x74
 80034fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003500:	ab03      	add	r3, sp, #12
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	462a      	mov	r2, r5
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <_svfiprintf_r+0x1f8>)
 8003508:	a904      	add	r1, sp, #16
 800350a:	4638      	mov	r0, r7
 800350c:	f000 f87a 	bl	8003604 <_printf_i>
 8003510:	e7eb      	b.n	80034ea <_svfiprintf_r+0x1c2>
 8003512:	bf00      	nop
 8003514:	08003b74 	.word	0x08003b74
 8003518:	08003b7e 	.word	0x08003b7e
 800351c:	00000000 	.word	0x00000000
 8003520:	08003271 	.word	0x08003271
 8003524:	08003b7a 	.word	0x08003b7a

08003528 <_printf_common>:
 8003528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800352c:	4616      	mov	r6, r2
 800352e:	4699      	mov	r9, r3
 8003530:	688a      	ldr	r2, [r1, #8]
 8003532:	690b      	ldr	r3, [r1, #16]
 8003534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003538:	4293      	cmp	r3, r2
 800353a:	bfb8      	it	lt
 800353c:	4613      	movlt	r3, r2
 800353e:	6033      	str	r3, [r6, #0]
 8003540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003544:	4607      	mov	r7, r0
 8003546:	460c      	mov	r4, r1
 8003548:	b10a      	cbz	r2, 800354e <_printf_common+0x26>
 800354a:	3301      	adds	r3, #1
 800354c:	6033      	str	r3, [r6, #0]
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	0699      	lsls	r1, r3, #26
 8003552:	bf42      	ittt	mi
 8003554:	6833      	ldrmi	r3, [r6, #0]
 8003556:	3302      	addmi	r3, #2
 8003558:	6033      	strmi	r3, [r6, #0]
 800355a:	6825      	ldr	r5, [r4, #0]
 800355c:	f015 0506 	ands.w	r5, r5, #6
 8003560:	d106      	bne.n	8003570 <_printf_common+0x48>
 8003562:	f104 0a19 	add.w	sl, r4, #25
 8003566:	68e3      	ldr	r3, [r4, #12]
 8003568:	6832      	ldr	r2, [r6, #0]
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	42ab      	cmp	r3, r5
 800356e:	dc26      	bgt.n	80035be <_printf_common+0x96>
 8003570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003574:	1e13      	subs	r3, r2, #0
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	bf18      	it	ne
 800357a:	2301      	movne	r3, #1
 800357c:	0692      	lsls	r2, r2, #26
 800357e:	d42b      	bmi.n	80035d8 <_printf_common+0xb0>
 8003580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003584:	4649      	mov	r1, r9
 8003586:	4638      	mov	r0, r7
 8003588:	47c0      	blx	r8
 800358a:	3001      	adds	r0, #1
 800358c:	d01e      	beq.n	80035cc <_printf_common+0xa4>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	68e5      	ldr	r5, [r4, #12]
 8003592:	6832      	ldr	r2, [r6, #0]
 8003594:	f003 0306 	and.w	r3, r3, #6
 8003598:	2b04      	cmp	r3, #4
 800359a:	bf08      	it	eq
 800359c:	1aad      	subeq	r5, r5, r2
 800359e:	68a3      	ldr	r3, [r4, #8]
 80035a0:	6922      	ldr	r2, [r4, #16]
 80035a2:	bf0c      	ite	eq
 80035a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a8:	2500      	movne	r5, #0
 80035aa:	4293      	cmp	r3, r2
 80035ac:	bfc4      	itt	gt
 80035ae:	1a9b      	subgt	r3, r3, r2
 80035b0:	18ed      	addgt	r5, r5, r3
 80035b2:	2600      	movs	r6, #0
 80035b4:	341a      	adds	r4, #26
 80035b6:	42b5      	cmp	r5, r6
 80035b8:	d11a      	bne.n	80035f0 <_printf_common+0xc8>
 80035ba:	2000      	movs	r0, #0
 80035bc:	e008      	b.n	80035d0 <_printf_common+0xa8>
 80035be:	2301      	movs	r3, #1
 80035c0:	4652      	mov	r2, sl
 80035c2:	4649      	mov	r1, r9
 80035c4:	4638      	mov	r0, r7
 80035c6:	47c0      	blx	r8
 80035c8:	3001      	adds	r0, #1
 80035ca:	d103      	bne.n	80035d4 <_printf_common+0xac>
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d4:	3501      	adds	r5, #1
 80035d6:	e7c6      	b.n	8003566 <_printf_common+0x3e>
 80035d8:	18e1      	adds	r1, r4, r3
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	2030      	movs	r0, #48	; 0x30
 80035de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035e2:	4422      	add	r2, r4
 80035e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035ec:	3302      	adds	r3, #2
 80035ee:	e7c7      	b.n	8003580 <_printf_common+0x58>
 80035f0:	2301      	movs	r3, #1
 80035f2:	4622      	mov	r2, r4
 80035f4:	4649      	mov	r1, r9
 80035f6:	4638      	mov	r0, r7
 80035f8:	47c0      	blx	r8
 80035fa:	3001      	adds	r0, #1
 80035fc:	d0e6      	beq.n	80035cc <_printf_common+0xa4>
 80035fe:	3601      	adds	r6, #1
 8003600:	e7d9      	b.n	80035b6 <_printf_common+0x8e>
	...

08003604 <_printf_i>:
 8003604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003608:	7e0f      	ldrb	r7, [r1, #24]
 800360a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800360c:	2f78      	cmp	r7, #120	; 0x78
 800360e:	4691      	mov	r9, r2
 8003610:	4680      	mov	r8, r0
 8003612:	460c      	mov	r4, r1
 8003614:	469a      	mov	sl, r3
 8003616:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800361a:	d807      	bhi.n	800362c <_printf_i+0x28>
 800361c:	2f62      	cmp	r7, #98	; 0x62
 800361e:	d80a      	bhi.n	8003636 <_printf_i+0x32>
 8003620:	2f00      	cmp	r7, #0
 8003622:	f000 80d8 	beq.w	80037d6 <_printf_i+0x1d2>
 8003626:	2f58      	cmp	r7, #88	; 0x58
 8003628:	f000 80a3 	beq.w	8003772 <_printf_i+0x16e>
 800362c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003634:	e03a      	b.n	80036ac <_printf_i+0xa8>
 8003636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800363a:	2b15      	cmp	r3, #21
 800363c:	d8f6      	bhi.n	800362c <_printf_i+0x28>
 800363e:	a101      	add	r1, pc, #4	; (adr r1, 8003644 <_printf_i+0x40>)
 8003640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003644:	0800369d 	.word	0x0800369d
 8003648:	080036b1 	.word	0x080036b1
 800364c:	0800362d 	.word	0x0800362d
 8003650:	0800362d 	.word	0x0800362d
 8003654:	0800362d 	.word	0x0800362d
 8003658:	0800362d 	.word	0x0800362d
 800365c:	080036b1 	.word	0x080036b1
 8003660:	0800362d 	.word	0x0800362d
 8003664:	0800362d 	.word	0x0800362d
 8003668:	0800362d 	.word	0x0800362d
 800366c:	0800362d 	.word	0x0800362d
 8003670:	080037bd 	.word	0x080037bd
 8003674:	080036e1 	.word	0x080036e1
 8003678:	0800379f 	.word	0x0800379f
 800367c:	0800362d 	.word	0x0800362d
 8003680:	0800362d 	.word	0x0800362d
 8003684:	080037df 	.word	0x080037df
 8003688:	0800362d 	.word	0x0800362d
 800368c:	080036e1 	.word	0x080036e1
 8003690:	0800362d 	.word	0x0800362d
 8003694:	0800362d 	.word	0x0800362d
 8003698:	080037a7 	.word	0x080037a7
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	1d1a      	adds	r2, r3, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	602a      	str	r2, [r5, #0]
 80036a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0a3      	b.n	80037f8 <_printf_i+0x1f4>
 80036b0:	6820      	ldr	r0, [r4, #0]
 80036b2:	6829      	ldr	r1, [r5, #0]
 80036b4:	0606      	lsls	r6, r0, #24
 80036b6:	f101 0304 	add.w	r3, r1, #4
 80036ba:	d50a      	bpl.n	80036d2 <_printf_i+0xce>
 80036bc:	680e      	ldr	r6, [r1, #0]
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	2e00      	cmp	r6, #0
 80036c2:	da03      	bge.n	80036cc <_printf_i+0xc8>
 80036c4:	232d      	movs	r3, #45	; 0x2d
 80036c6:	4276      	negs	r6, r6
 80036c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036cc:	485e      	ldr	r0, [pc, #376]	; (8003848 <_printf_i+0x244>)
 80036ce:	230a      	movs	r3, #10
 80036d0:	e019      	b.n	8003706 <_printf_i+0x102>
 80036d2:	680e      	ldr	r6, [r1, #0]
 80036d4:	602b      	str	r3, [r5, #0]
 80036d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036da:	bf18      	it	ne
 80036dc:	b236      	sxthne	r6, r6
 80036de:	e7ef      	b.n	80036c0 <_printf_i+0xbc>
 80036e0:	682b      	ldr	r3, [r5, #0]
 80036e2:	6820      	ldr	r0, [r4, #0]
 80036e4:	1d19      	adds	r1, r3, #4
 80036e6:	6029      	str	r1, [r5, #0]
 80036e8:	0601      	lsls	r1, r0, #24
 80036ea:	d501      	bpl.n	80036f0 <_printf_i+0xec>
 80036ec:	681e      	ldr	r6, [r3, #0]
 80036ee:	e002      	b.n	80036f6 <_printf_i+0xf2>
 80036f0:	0646      	lsls	r6, r0, #25
 80036f2:	d5fb      	bpl.n	80036ec <_printf_i+0xe8>
 80036f4:	881e      	ldrh	r6, [r3, #0]
 80036f6:	4854      	ldr	r0, [pc, #336]	; (8003848 <_printf_i+0x244>)
 80036f8:	2f6f      	cmp	r7, #111	; 0x6f
 80036fa:	bf0c      	ite	eq
 80036fc:	2308      	moveq	r3, #8
 80036fe:	230a      	movne	r3, #10
 8003700:	2100      	movs	r1, #0
 8003702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003706:	6865      	ldr	r5, [r4, #4]
 8003708:	60a5      	str	r5, [r4, #8]
 800370a:	2d00      	cmp	r5, #0
 800370c:	bfa2      	ittt	ge
 800370e:	6821      	ldrge	r1, [r4, #0]
 8003710:	f021 0104 	bicge.w	r1, r1, #4
 8003714:	6021      	strge	r1, [r4, #0]
 8003716:	b90e      	cbnz	r6, 800371c <_printf_i+0x118>
 8003718:	2d00      	cmp	r5, #0
 800371a:	d04d      	beq.n	80037b8 <_printf_i+0x1b4>
 800371c:	4615      	mov	r5, r2
 800371e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003722:	fb03 6711 	mls	r7, r3, r1, r6
 8003726:	5dc7      	ldrb	r7, [r0, r7]
 8003728:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800372c:	4637      	mov	r7, r6
 800372e:	42bb      	cmp	r3, r7
 8003730:	460e      	mov	r6, r1
 8003732:	d9f4      	bls.n	800371e <_printf_i+0x11a>
 8003734:	2b08      	cmp	r3, #8
 8003736:	d10b      	bne.n	8003750 <_printf_i+0x14c>
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	07de      	lsls	r6, r3, #31
 800373c:	d508      	bpl.n	8003750 <_printf_i+0x14c>
 800373e:	6923      	ldr	r3, [r4, #16]
 8003740:	6861      	ldr	r1, [r4, #4]
 8003742:	4299      	cmp	r1, r3
 8003744:	bfde      	ittt	le
 8003746:	2330      	movle	r3, #48	; 0x30
 8003748:	f805 3c01 	strble.w	r3, [r5, #-1]
 800374c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003750:	1b52      	subs	r2, r2, r5
 8003752:	6122      	str	r2, [r4, #16]
 8003754:	f8cd a000 	str.w	sl, [sp]
 8003758:	464b      	mov	r3, r9
 800375a:	aa03      	add	r2, sp, #12
 800375c:	4621      	mov	r1, r4
 800375e:	4640      	mov	r0, r8
 8003760:	f7ff fee2 	bl	8003528 <_printf_common>
 8003764:	3001      	adds	r0, #1
 8003766:	d14c      	bne.n	8003802 <_printf_i+0x1fe>
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	b004      	add	sp, #16
 800376e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003772:	4835      	ldr	r0, [pc, #212]	; (8003848 <_printf_i+0x244>)
 8003774:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003778:	6829      	ldr	r1, [r5, #0]
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003780:	6029      	str	r1, [r5, #0]
 8003782:	061d      	lsls	r5, r3, #24
 8003784:	d514      	bpl.n	80037b0 <_printf_i+0x1ac>
 8003786:	07df      	lsls	r7, r3, #31
 8003788:	bf44      	itt	mi
 800378a:	f043 0320 	orrmi.w	r3, r3, #32
 800378e:	6023      	strmi	r3, [r4, #0]
 8003790:	b91e      	cbnz	r6, 800379a <_printf_i+0x196>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	f023 0320 	bic.w	r3, r3, #32
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	2310      	movs	r3, #16
 800379c:	e7b0      	b.n	8003700 <_printf_i+0xfc>
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	f043 0320 	orr.w	r3, r3, #32
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	2378      	movs	r3, #120	; 0x78
 80037a8:	4828      	ldr	r0, [pc, #160]	; (800384c <_printf_i+0x248>)
 80037aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037ae:	e7e3      	b.n	8003778 <_printf_i+0x174>
 80037b0:	0659      	lsls	r1, r3, #25
 80037b2:	bf48      	it	mi
 80037b4:	b2b6      	uxthmi	r6, r6
 80037b6:	e7e6      	b.n	8003786 <_printf_i+0x182>
 80037b8:	4615      	mov	r5, r2
 80037ba:	e7bb      	b.n	8003734 <_printf_i+0x130>
 80037bc:	682b      	ldr	r3, [r5, #0]
 80037be:	6826      	ldr	r6, [r4, #0]
 80037c0:	6961      	ldr	r1, [r4, #20]
 80037c2:	1d18      	adds	r0, r3, #4
 80037c4:	6028      	str	r0, [r5, #0]
 80037c6:	0635      	lsls	r5, r6, #24
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	d501      	bpl.n	80037d0 <_printf_i+0x1cc>
 80037cc:	6019      	str	r1, [r3, #0]
 80037ce:	e002      	b.n	80037d6 <_printf_i+0x1d2>
 80037d0:	0670      	lsls	r0, r6, #25
 80037d2:	d5fb      	bpl.n	80037cc <_printf_i+0x1c8>
 80037d4:	8019      	strh	r1, [r3, #0]
 80037d6:	2300      	movs	r3, #0
 80037d8:	6123      	str	r3, [r4, #16]
 80037da:	4615      	mov	r5, r2
 80037dc:	e7ba      	b.n	8003754 <_printf_i+0x150>
 80037de:	682b      	ldr	r3, [r5, #0]
 80037e0:	1d1a      	adds	r2, r3, #4
 80037e2:	602a      	str	r2, [r5, #0]
 80037e4:	681d      	ldr	r5, [r3, #0]
 80037e6:	6862      	ldr	r2, [r4, #4]
 80037e8:	2100      	movs	r1, #0
 80037ea:	4628      	mov	r0, r5
 80037ec:	f7fc fd18 	bl	8000220 <memchr>
 80037f0:	b108      	cbz	r0, 80037f6 <_printf_i+0x1f2>
 80037f2:	1b40      	subs	r0, r0, r5
 80037f4:	6060      	str	r0, [r4, #4]
 80037f6:	6863      	ldr	r3, [r4, #4]
 80037f8:	6123      	str	r3, [r4, #16]
 80037fa:	2300      	movs	r3, #0
 80037fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003800:	e7a8      	b.n	8003754 <_printf_i+0x150>
 8003802:	6923      	ldr	r3, [r4, #16]
 8003804:	462a      	mov	r2, r5
 8003806:	4649      	mov	r1, r9
 8003808:	4640      	mov	r0, r8
 800380a:	47d0      	blx	sl
 800380c:	3001      	adds	r0, #1
 800380e:	d0ab      	beq.n	8003768 <_printf_i+0x164>
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	079b      	lsls	r3, r3, #30
 8003814:	d413      	bmi.n	800383e <_printf_i+0x23a>
 8003816:	68e0      	ldr	r0, [r4, #12]
 8003818:	9b03      	ldr	r3, [sp, #12]
 800381a:	4298      	cmp	r0, r3
 800381c:	bfb8      	it	lt
 800381e:	4618      	movlt	r0, r3
 8003820:	e7a4      	b.n	800376c <_printf_i+0x168>
 8003822:	2301      	movs	r3, #1
 8003824:	4632      	mov	r2, r6
 8003826:	4649      	mov	r1, r9
 8003828:	4640      	mov	r0, r8
 800382a:	47d0      	blx	sl
 800382c:	3001      	adds	r0, #1
 800382e:	d09b      	beq.n	8003768 <_printf_i+0x164>
 8003830:	3501      	adds	r5, #1
 8003832:	68e3      	ldr	r3, [r4, #12]
 8003834:	9903      	ldr	r1, [sp, #12]
 8003836:	1a5b      	subs	r3, r3, r1
 8003838:	42ab      	cmp	r3, r5
 800383a:	dcf2      	bgt.n	8003822 <_printf_i+0x21e>
 800383c:	e7eb      	b.n	8003816 <_printf_i+0x212>
 800383e:	2500      	movs	r5, #0
 8003840:	f104 0619 	add.w	r6, r4, #25
 8003844:	e7f5      	b.n	8003832 <_printf_i+0x22e>
 8003846:	bf00      	nop
 8003848:	08003b85 	.word	0x08003b85
 800384c:	08003b96 	.word	0x08003b96

08003850 <memcpy>:
 8003850:	440a      	add	r2, r1
 8003852:	4291      	cmp	r1, r2
 8003854:	f100 33ff 	add.w	r3, r0, #4294967295
 8003858:	d100      	bne.n	800385c <memcpy+0xc>
 800385a:	4770      	bx	lr
 800385c:	b510      	push	{r4, lr}
 800385e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003862:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003866:	4291      	cmp	r1, r2
 8003868:	d1f9      	bne.n	800385e <memcpy+0xe>
 800386a:	bd10      	pop	{r4, pc}

0800386c <memmove>:
 800386c:	4288      	cmp	r0, r1
 800386e:	b510      	push	{r4, lr}
 8003870:	eb01 0402 	add.w	r4, r1, r2
 8003874:	d902      	bls.n	800387c <memmove+0x10>
 8003876:	4284      	cmp	r4, r0
 8003878:	4623      	mov	r3, r4
 800387a:	d807      	bhi.n	800388c <memmove+0x20>
 800387c:	1e43      	subs	r3, r0, #1
 800387e:	42a1      	cmp	r1, r4
 8003880:	d008      	beq.n	8003894 <memmove+0x28>
 8003882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800388a:	e7f8      	b.n	800387e <memmove+0x12>
 800388c:	4402      	add	r2, r0
 800388e:	4601      	mov	r1, r0
 8003890:	428a      	cmp	r2, r1
 8003892:	d100      	bne.n	8003896 <memmove+0x2a>
 8003894:	bd10      	pop	{r4, pc}
 8003896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800389a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800389e:	e7f7      	b.n	8003890 <memmove+0x24>

080038a0 <_free_r>:
 80038a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038a2:	2900      	cmp	r1, #0
 80038a4:	d044      	beq.n	8003930 <_free_r+0x90>
 80038a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038aa:	9001      	str	r0, [sp, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f1a1 0404 	sub.w	r4, r1, #4
 80038b2:	bfb8      	it	lt
 80038b4:	18e4      	addlt	r4, r4, r3
 80038b6:	f000 f913 	bl	8003ae0 <__malloc_lock>
 80038ba:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <_free_r+0x94>)
 80038bc:	9801      	ldr	r0, [sp, #4]
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	b933      	cbnz	r3, 80038d0 <_free_r+0x30>
 80038c2:	6063      	str	r3, [r4, #4]
 80038c4:	6014      	str	r4, [r2, #0]
 80038c6:	b003      	add	sp, #12
 80038c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038cc:	f000 b90e 	b.w	8003aec <__malloc_unlock>
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	d908      	bls.n	80038e6 <_free_r+0x46>
 80038d4:	6825      	ldr	r5, [r4, #0]
 80038d6:	1961      	adds	r1, r4, r5
 80038d8:	428b      	cmp	r3, r1
 80038da:	bf01      	itttt	eq
 80038dc:	6819      	ldreq	r1, [r3, #0]
 80038de:	685b      	ldreq	r3, [r3, #4]
 80038e0:	1949      	addeq	r1, r1, r5
 80038e2:	6021      	streq	r1, [r4, #0]
 80038e4:	e7ed      	b.n	80038c2 <_free_r+0x22>
 80038e6:	461a      	mov	r2, r3
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b10b      	cbz	r3, 80038f0 <_free_r+0x50>
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	d9fa      	bls.n	80038e6 <_free_r+0x46>
 80038f0:	6811      	ldr	r1, [r2, #0]
 80038f2:	1855      	adds	r5, r2, r1
 80038f4:	42a5      	cmp	r5, r4
 80038f6:	d10b      	bne.n	8003910 <_free_r+0x70>
 80038f8:	6824      	ldr	r4, [r4, #0]
 80038fa:	4421      	add	r1, r4
 80038fc:	1854      	adds	r4, r2, r1
 80038fe:	42a3      	cmp	r3, r4
 8003900:	6011      	str	r1, [r2, #0]
 8003902:	d1e0      	bne.n	80038c6 <_free_r+0x26>
 8003904:	681c      	ldr	r4, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	6053      	str	r3, [r2, #4]
 800390a:	4421      	add	r1, r4
 800390c:	6011      	str	r1, [r2, #0]
 800390e:	e7da      	b.n	80038c6 <_free_r+0x26>
 8003910:	d902      	bls.n	8003918 <_free_r+0x78>
 8003912:	230c      	movs	r3, #12
 8003914:	6003      	str	r3, [r0, #0]
 8003916:	e7d6      	b.n	80038c6 <_free_r+0x26>
 8003918:	6825      	ldr	r5, [r4, #0]
 800391a:	1961      	adds	r1, r4, r5
 800391c:	428b      	cmp	r3, r1
 800391e:	bf04      	itt	eq
 8003920:	6819      	ldreq	r1, [r3, #0]
 8003922:	685b      	ldreq	r3, [r3, #4]
 8003924:	6063      	str	r3, [r4, #4]
 8003926:	bf04      	itt	eq
 8003928:	1949      	addeq	r1, r1, r5
 800392a:	6021      	streq	r1, [r4, #0]
 800392c:	6054      	str	r4, [r2, #4]
 800392e:	e7ca      	b.n	80038c6 <_free_r+0x26>
 8003930:	b003      	add	sp, #12
 8003932:	bd30      	pop	{r4, r5, pc}
 8003934:	20000144 	.word	0x20000144

08003938 <sbrk_aligned>:
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	4e0e      	ldr	r6, [pc, #56]	; (8003974 <sbrk_aligned+0x3c>)
 800393c:	460c      	mov	r4, r1
 800393e:	6831      	ldr	r1, [r6, #0]
 8003940:	4605      	mov	r5, r0
 8003942:	b911      	cbnz	r1, 800394a <sbrk_aligned+0x12>
 8003944:	f000 f8bc 	bl	8003ac0 <_sbrk_r>
 8003948:	6030      	str	r0, [r6, #0]
 800394a:	4621      	mov	r1, r4
 800394c:	4628      	mov	r0, r5
 800394e:	f000 f8b7 	bl	8003ac0 <_sbrk_r>
 8003952:	1c43      	adds	r3, r0, #1
 8003954:	d00a      	beq.n	800396c <sbrk_aligned+0x34>
 8003956:	1cc4      	adds	r4, r0, #3
 8003958:	f024 0403 	bic.w	r4, r4, #3
 800395c:	42a0      	cmp	r0, r4
 800395e:	d007      	beq.n	8003970 <sbrk_aligned+0x38>
 8003960:	1a21      	subs	r1, r4, r0
 8003962:	4628      	mov	r0, r5
 8003964:	f000 f8ac 	bl	8003ac0 <_sbrk_r>
 8003968:	3001      	adds	r0, #1
 800396a:	d101      	bne.n	8003970 <sbrk_aligned+0x38>
 800396c:	f04f 34ff 	mov.w	r4, #4294967295
 8003970:	4620      	mov	r0, r4
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	20000148 	.word	0x20000148

08003978 <_malloc_r>:
 8003978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800397c:	1ccd      	adds	r5, r1, #3
 800397e:	f025 0503 	bic.w	r5, r5, #3
 8003982:	3508      	adds	r5, #8
 8003984:	2d0c      	cmp	r5, #12
 8003986:	bf38      	it	cc
 8003988:	250c      	movcc	r5, #12
 800398a:	2d00      	cmp	r5, #0
 800398c:	4607      	mov	r7, r0
 800398e:	db01      	blt.n	8003994 <_malloc_r+0x1c>
 8003990:	42a9      	cmp	r1, r5
 8003992:	d905      	bls.n	80039a0 <_malloc_r+0x28>
 8003994:	230c      	movs	r3, #12
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	2600      	movs	r6, #0
 800399a:	4630      	mov	r0, r6
 800399c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039a0:	4e2e      	ldr	r6, [pc, #184]	; (8003a5c <_malloc_r+0xe4>)
 80039a2:	f000 f89d 	bl	8003ae0 <__malloc_lock>
 80039a6:	6833      	ldr	r3, [r6, #0]
 80039a8:	461c      	mov	r4, r3
 80039aa:	bb34      	cbnz	r4, 80039fa <_malloc_r+0x82>
 80039ac:	4629      	mov	r1, r5
 80039ae:	4638      	mov	r0, r7
 80039b0:	f7ff ffc2 	bl	8003938 <sbrk_aligned>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	4604      	mov	r4, r0
 80039b8:	d14d      	bne.n	8003a56 <_malloc_r+0xde>
 80039ba:	6834      	ldr	r4, [r6, #0]
 80039bc:	4626      	mov	r6, r4
 80039be:	2e00      	cmp	r6, #0
 80039c0:	d140      	bne.n	8003a44 <_malloc_r+0xcc>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	4631      	mov	r1, r6
 80039c6:	4638      	mov	r0, r7
 80039c8:	eb04 0803 	add.w	r8, r4, r3
 80039cc:	f000 f878 	bl	8003ac0 <_sbrk_r>
 80039d0:	4580      	cmp	r8, r0
 80039d2:	d13a      	bne.n	8003a4a <_malloc_r+0xd2>
 80039d4:	6821      	ldr	r1, [r4, #0]
 80039d6:	3503      	adds	r5, #3
 80039d8:	1a6d      	subs	r5, r5, r1
 80039da:	f025 0503 	bic.w	r5, r5, #3
 80039de:	3508      	adds	r5, #8
 80039e0:	2d0c      	cmp	r5, #12
 80039e2:	bf38      	it	cc
 80039e4:	250c      	movcc	r5, #12
 80039e6:	4629      	mov	r1, r5
 80039e8:	4638      	mov	r0, r7
 80039ea:	f7ff ffa5 	bl	8003938 <sbrk_aligned>
 80039ee:	3001      	adds	r0, #1
 80039f0:	d02b      	beq.n	8003a4a <_malloc_r+0xd2>
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	442b      	add	r3, r5
 80039f6:	6023      	str	r3, [r4, #0]
 80039f8:	e00e      	b.n	8003a18 <_malloc_r+0xa0>
 80039fa:	6822      	ldr	r2, [r4, #0]
 80039fc:	1b52      	subs	r2, r2, r5
 80039fe:	d41e      	bmi.n	8003a3e <_malloc_r+0xc6>
 8003a00:	2a0b      	cmp	r2, #11
 8003a02:	d916      	bls.n	8003a32 <_malloc_r+0xba>
 8003a04:	1961      	adds	r1, r4, r5
 8003a06:	42a3      	cmp	r3, r4
 8003a08:	6025      	str	r5, [r4, #0]
 8003a0a:	bf18      	it	ne
 8003a0c:	6059      	strne	r1, [r3, #4]
 8003a0e:	6863      	ldr	r3, [r4, #4]
 8003a10:	bf08      	it	eq
 8003a12:	6031      	streq	r1, [r6, #0]
 8003a14:	5162      	str	r2, [r4, r5]
 8003a16:	604b      	str	r3, [r1, #4]
 8003a18:	4638      	mov	r0, r7
 8003a1a:	f104 060b 	add.w	r6, r4, #11
 8003a1e:	f000 f865 	bl	8003aec <__malloc_unlock>
 8003a22:	f026 0607 	bic.w	r6, r6, #7
 8003a26:	1d23      	adds	r3, r4, #4
 8003a28:	1af2      	subs	r2, r6, r3
 8003a2a:	d0b6      	beq.n	800399a <_malloc_r+0x22>
 8003a2c:	1b9b      	subs	r3, r3, r6
 8003a2e:	50a3      	str	r3, [r4, r2]
 8003a30:	e7b3      	b.n	800399a <_malloc_r+0x22>
 8003a32:	6862      	ldr	r2, [r4, #4]
 8003a34:	42a3      	cmp	r3, r4
 8003a36:	bf0c      	ite	eq
 8003a38:	6032      	streq	r2, [r6, #0]
 8003a3a:	605a      	strne	r2, [r3, #4]
 8003a3c:	e7ec      	b.n	8003a18 <_malloc_r+0xa0>
 8003a3e:	4623      	mov	r3, r4
 8003a40:	6864      	ldr	r4, [r4, #4]
 8003a42:	e7b2      	b.n	80039aa <_malloc_r+0x32>
 8003a44:	4634      	mov	r4, r6
 8003a46:	6876      	ldr	r6, [r6, #4]
 8003a48:	e7b9      	b.n	80039be <_malloc_r+0x46>
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4638      	mov	r0, r7
 8003a50:	f000 f84c 	bl	8003aec <__malloc_unlock>
 8003a54:	e7a1      	b.n	800399a <_malloc_r+0x22>
 8003a56:	6025      	str	r5, [r4, #0]
 8003a58:	e7de      	b.n	8003a18 <_malloc_r+0xa0>
 8003a5a:	bf00      	nop
 8003a5c:	20000144 	.word	0x20000144

08003a60 <_realloc_r>:
 8003a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a64:	4680      	mov	r8, r0
 8003a66:	4614      	mov	r4, r2
 8003a68:	460e      	mov	r6, r1
 8003a6a:	b921      	cbnz	r1, 8003a76 <_realloc_r+0x16>
 8003a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a70:	4611      	mov	r1, r2
 8003a72:	f7ff bf81 	b.w	8003978 <_malloc_r>
 8003a76:	b92a      	cbnz	r2, 8003a84 <_realloc_r+0x24>
 8003a78:	f7ff ff12 	bl	80038a0 <_free_r>
 8003a7c:	4625      	mov	r5, r4
 8003a7e:	4628      	mov	r0, r5
 8003a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a84:	f000 f838 	bl	8003af8 <_malloc_usable_size_r>
 8003a88:	4284      	cmp	r4, r0
 8003a8a:	4607      	mov	r7, r0
 8003a8c:	d802      	bhi.n	8003a94 <_realloc_r+0x34>
 8003a8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a92:	d812      	bhi.n	8003aba <_realloc_r+0x5a>
 8003a94:	4621      	mov	r1, r4
 8003a96:	4640      	mov	r0, r8
 8003a98:	f7ff ff6e 	bl	8003978 <_malloc_r>
 8003a9c:	4605      	mov	r5, r0
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	d0ed      	beq.n	8003a7e <_realloc_r+0x1e>
 8003aa2:	42bc      	cmp	r4, r7
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	4631      	mov	r1, r6
 8003aa8:	bf28      	it	cs
 8003aaa:	463a      	movcs	r2, r7
 8003aac:	f7ff fed0 	bl	8003850 <memcpy>
 8003ab0:	4631      	mov	r1, r6
 8003ab2:	4640      	mov	r0, r8
 8003ab4:	f7ff fef4 	bl	80038a0 <_free_r>
 8003ab8:	e7e1      	b.n	8003a7e <_realloc_r+0x1e>
 8003aba:	4635      	mov	r5, r6
 8003abc:	e7df      	b.n	8003a7e <_realloc_r+0x1e>
	...

08003ac0 <_sbrk_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4d06      	ldr	r5, [pc, #24]	; (8003adc <_sbrk_r+0x1c>)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	602b      	str	r3, [r5, #0]
 8003acc:	f7fd f890 	bl	8000bf0 <_sbrk>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d102      	bne.n	8003ada <_sbrk_r+0x1a>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	b103      	cbz	r3, 8003ada <_sbrk_r+0x1a>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	2000014c 	.word	0x2000014c

08003ae0 <__malloc_lock>:
 8003ae0:	4801      	ldr	r0, [pc, #4]	; (8003ae8 <__malloc_lock+0x8>)
 8003ae2:	f000 b811 	b.w	8003b08 <__retarget_lock_acquire_recursive>
 8003ae6:	bf00      	nop
 8003ae8:	20000150 	.word	0x20000150

08003aec <__malloc_unlock>:
 8003aec:	4801      	ldr	r0, [pc, #4]	; (8003af4 <__malloc_unlock+0x8>)
 8003aee:	f000 b80c 	b.w	8003b0a <__retarget_lock_release_recursive>
 8003af2:	bf00      	nop
 8003af4:	20000150 	.word	0x20000150

08003af8 <_malloc_usable_size_r>:
 8003af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003afc:	1f18      	subs	r0, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bfbc      	itt	lt
 8003b02:	580b      	ldrlt	r3, [r1, r0]
 8003b04:	18c0      	addlt	r0, r0, r3
 8003b06:	4770      	bx	lr

08003b08 <__retarget_lock_acquire_recursive>:
 8003b08:	4770      	bx	lr

08003b0a <__retarget_lock_release_recursive>:
 8003b0a:	4770      	bx	lr

08003b0c <_init>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr

08003b18 <_fini>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	bf00      	nop
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr
